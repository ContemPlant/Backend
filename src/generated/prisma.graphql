# source: http://localhost:4466/plantsdb/dev
# timestamp: Wed May 30 2018 15:18:41 GMT+0200 (CEST)

type AggregateArdu {
  count: Int!
}

type AggregatePlant {
  count: Int!
}

type AggregateSensorHumidity {
  count: Int!
}

type AggregateSensorLoudness {
  count: Int!
}

type AggregateSensorRadiation {
  count: Int!
}

type AggregateSensorTemperature {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Ardu {
  arduId: String!
  loadedPlant(where: PlantWhereInput): Plant
}

"""A connection to a list of items."""
type ArduConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArduEdge]!
  aggregate: AggregateArdu!
}

input ArduCreateInput {
  arduId: String!
  loadedPlant: PlantCreateOneInput
}

"""An edge in a connection."""
type ArduEdge {
  """The item at the end of the edge."""
  node: Ardu!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ArduOrderByInput {
  arduId_ASC
  arduId_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ArduPreviousValues {
  arduId: String!
}

type ArduSubscriptionPayload {
  mutation: MutationType!
  node: Ardu
  updatedFields: [String!]
  previousValues: ArduPreviousValues
}

input ArduSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ArduSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArduSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArduSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ArduWhereInput
}

input ArduUpdateInput {
  arduId: String
  loadedPlant: PlantUpdateOneInput
}

input ArduWhereInput {
  """Logical AND on all given filters."""
  AND: [ArduWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArduWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArduWhereInput!]
  arduId: String

  """All values that are not equal to given value."""
  arduId_not: String

  """All values that are contained in given list."""
  arduId_in: [String!]

  """All values that are not contained in given list."""
  arduId_not_in: [String!]

  """All values less than the given value."""
  arduId_lt: String

  """All values less than or equal the given value."""
  arduId_lte: String

  """All values greater than the given value."""
  arduId_gt: String

  """All values greater than or equal the given value."""
  arduId_gte: String

  """All values containing the given string."""
  arduId_contains: String

  """All values not containing the given string."""
  arduId_not_contains: String

  """All values starting with the given string."""
  arduId_starts_with: String

  """All values not starting with the given string."""
  arduId_not_starts_with: String

  """All values ending with the given string."""
  arduId_ends_with: String

  """All values not ending with the given string."""
  arduId_not_ends_with: String
  loadedPlant: PlantWhereInput
}

input ArduWhereUniqueInput {
  arduId: String
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPlant(data: PlantCreateInput!): Plant!
  createArdu(data: ArduCreateInput!): Ardu!
  createSensorTemperature(data: SensorTemperatureCreateInput!): SensorTemperature!
  createSensorRadiation(data: SensorRadiationCreateInput!): SensorRadiation!
  createSensorHumidity(data: SensorHumidityCreateInput!): SensorHumidity!
  createSensorLoudness(data: SensorLoudnessCreateInput!): SensorLoudness!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePlant(data: PlantUpdateInput!, where: PlantWhereUniqueInput!): Plant
  updateArdu(data: ArduUpdateInput!, where: ArduWhereUniqueInput!): Ardu
  updateSensorTemperature(data: SensorTemperatureUpdateInput!, where: SensorTemperatureWhereUniqueInput!): SensorTemperature
  updateSensorRadiation(data: SensorRadiationUpdateInput!, where: SensorRadiationWhereUniqueInput!): SensorRadiation
  updateSensorHumidity(data: SensorHumidityUpdateInput!, where: SensorHumidityWhereUniqueInput!): SensorHumidity
  updateSensorLoudness(data: SensorLoudnessUpdateInput!, where: SensorLoudnessWhereUniqueInput!): SensorLoudness
  deleteUser(where: UserWhereUniqueInput!): User
  deletePlant(where: PlantWhereUniqueInput!): Plant
  deleteArdu(where: ArduWhereUniqueInput!): Ardu
  deleteSensorTemperature(where: SensorTemperatureWhereUniqueInput!): SensorTemperature
  deleteSensorRadiation(where: SensorRadiationWhereUniqueInput!): SensorRadiation
  deleteSensorHumidity(where: SensorHumidityWhereUniqueInput!): SensorHumidity
  deleteSensorLoudness(where: SensorLoudnessWhereUniqueInput!): SensorLoudness
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPlant(where: PlantWhereUniqueInput!, create: PlantCreateInput!, update: PlantUpdateInput!): Plant!
  upsertArdu(where: ArduWhereUniqueInput!, create: ArduCreateInput!, update: ArduUpdateInput!): Ardu!
  upsertSensorTemperature(where: SensorTemperatureWhereUniqueInput!, create: SensorTemperatureCreateInput!, update: SensorTemperatureUpdateInput!): SensorTemperature!
  upsertSensorRadiation(where: SensorRadiationWhereUniqueInput!, create: SensorRadiationCreateInput!, update: SensorRadiationUpdateInput!): SensorRadiation!
  upsertSensorHumidity(where: SensorHumidityWhereUniqueInput!, create: SensorHumidityCreateInput!, update: SensorHumidityUpdateInput!): SensorHumidity!
  upsertSensorLoudness(where: SensorLoudnessWhereUniqueInput!, create: SensorLoudnessCreateInput!, update: SensorLoudnessUpdateInput!): SensorLoudness!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyPlants(data: PlantUpdateInput!, where: PlantWhereInput): BatchPayload!
  updateManyArdus(data: ArduUpdateInput!, where: ArduWhereInput): BatchPayload!
  updateManySensorTemperatures(data: SensorTemperatureUpdateInput!, where: SensorTemperatureWhereInput): BatchPayload!
  updateManySensorRadiations(data: SensorRadiationUpdateInput!, where: SensorRadiationWhereInput): BatchPayload!
  updateManySensorHumidities(data: SensorHumidityUpdateInput!, where: SensorHumidityWhereInput): BatchPayload!
  updateManySensorLoudnesses(data: SensorLoudnessUpdateInput!, where: SensorLoudnessWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPlants(where: PlantWhereInput): BatchPayload!
  deleteManyArdus(where: ArduWhereInput): BatchPayload!
  deleteManySensorTemperatures(where: SensorTemperatureWhereInput): BatchPayload!
  deleteManySensorRadiations(where: SensorRadiationWhereInput): BatchPayload!
  deleteManySensorHumidities(where: SensorHumidityWhereInput): BatchPayload!
  deleteManySensorLoudnesses(where: SensorLoudnessWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Plant implements Node {
  id: ID!
  owner(where: UserWhereInput): User!
  name: String!
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  humidityData(where: SensorHumidityWhereInput, orderBy: SensorHumidityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorHumidity!]
  temperatureData(where: SensorTemperatureWhereInput, orderBy: SensorTemperatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorTemperature!]
  radiationData(where: SensorRadiationWhereInput, orderBy: SensorRadiationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorRadiation!]
  loudnessData(where: SensorLoudnessWhereInput, orderBy: SensorLoudnessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorLoudness!]
}

"""A connection to a list of items."""
type PlantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlantEdge]!
  aggregate: AggregatePlant!
}

input PlantCreateInput {
  name: String!
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserCreateOneWithoutPlantsInput!
  humidityData: SensorHumidityCreateManyWithoutPlantInput
  temperatureData: SensorTemperatureCreateManyWithoutPlantInput
  radiationData: SensorRadiationCreateManyWithoutPlantInput
  loudnessData: SensorLoudnessCreateManyWithoutPlantInput
}

input PlantCreateManyWithoutOwnerInput {
  create: [PlantCreateWithoutOwnerInput!]
  connect: [PlantWhereUniqueInput!]
}

input PlantCreateOneInput {
  create: PlantCreateInput
  connect: PlantWhereUniqueInput
}

input PlantCreateOneWithoutHumidityDataInput {
  create: PlantCreateWithoutHumidityDataInput
  connect: PlantWhereUniqueInput
}

input PlantCreateOneWithoutLoudnessDataInput {
  create: PlantCreateWithoutLoudnessDataInput
  connect: PlantWhereUniqueInput
}

input PlantCreateOneWithoutRadiationDataInput {
  create: PlantCreateWithoutRadiationDataInput
  connect: PlantWhereUniqueInput
}

input PlantCreateOneWithoutTemperatureDataInput {
  create: PlantCreateWithoutTemperatureDataInput
  connect: PlantWhereUniqueInput
}

input PlantCreateWithoutHumidityDataInput {
  name: String!
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserCreateOneWithoutPlantsInput!
  temperatureData: SensorTemperatureCreateManyWithoutPlantInput
  radiationData: SensorRadiationCreateManyWithoutPlantInput
  loudnessData: SensorLoudnessCreateManyWithoutPlantInput
}

input PlantCreateWithoutLoudnessDataInput {
  name: String!
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserCreateOneWithoutPlantsInput!
  humidityData: SensorHumidityCreateManyWithoutPlantInput
  temperatureData: SensorTemperatureCreateManyWithoutPlantInput
  radiationData: SensorRadiationCreateManyWithoutPlantInput
}

input PlantCreateWithoutOwnerInput {
  name: String!
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  humidityData: SensorHumidityCreateManyWithoutPlantInput
  temperatureData: SensorTemperatureCreateManyWithoutPlantInput
  radiationData: SensorRadiationCreateManyWithoutPlantInput
  loudnessData: SensorLoudnessCreateManyWithoutPlantInput
}

input PlantCreateWithoutRadiationDataInput {
  name: String!
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserCreateOneWithoutPlantsInput!
  humidityData: SensorHumidityCreateManyWithoutPlantInput
  temperatureData: SensorTemperatureCreateManyWithoutPlantInput
  loudnessData: SensorLoudnessCreateManyWithoutPlantInput
}

input PlantCreateWithoutTemperatureDataInput {
  name: String!
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserCreateOneWithoutPlantsInput!
  humidityData: SensorHumidityCreateManyWithoutPlantInput
  radiationData: SensorRadiationCreateManyWithoutPlantInput
  loudnessData: SensorLoudnessCreateManyWithoutPlantInput
}

"""An edge in a connection."""
type PlantEdge {
  """The item at the end of the edge."""
  node: Plant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlantOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  temperature_opt_ASC
  temperature_opt_DESC
  temperature_weight_ASC
  temperature_weight_DESC
  radiation_opt_ASC
  radiation_opt_DESC
  radiation_weight_ASC
  radiation_weight_DESC
  humidity_opt_ASC
  humidity_opt_DESC
  humidity_weight_ASC
  humidity_weight_DESC
  loudness_opt_ASC
  loudness_opt_DESC
  loudness_weight_ASC
  loudness_weight_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PlantPreviousValues {
  id: ID!
  name: String!
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
}

type PlantSubscriptionPayload {
  mutation: MutationType!
  node: Plant
  updatedFields: [String!]
  previousValues: PlantPreviousValues
}

input PlantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlantWhereInput
}

input PlantUpdateDataInput {
  name: String
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  humidityData: SensorHumidityUpdateManyWithoutPlantInput
  temperatureData: SensorTemperatureUpdateManyWithoutPlantInput
  radiationData: SensorRadiationUpdateManyWithoutPlantInput
  loudnessData: SensorLoudnessUpdateManyWithoutPlantInput
}

input PlantUpdateInput {
  name: String
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  humidityData: SensorHumidityUpdateManyWithoutPlantInput
  temperatureData: SensorTemperatureUpdateManyWithoutPlantInput
  radiationData: SensorRadiationUpdateManyWithoutPlantInput
  loudnessData: SensorLoudnessUpdateManyWithoutPlantInput
}

input PlantUpdateManyWithoutOwnerInput {
  create: [PlantCreateWithoutOwnerInput!]
  connect: [PlantWhereUniqueInput!]
  disconnect: [PlantWhereUniqueInput!]
  delete: [PlantWhereUniqueInput!]
  update: [PlantUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [PlantUpsertWithWhereUniqueWithoutOwnerInput!]
}

input PlantUpdateOneInput {
  create: PlantCreateInput
  connect: PlantWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PlantUpdateDataInput
  upsert: PlantUpsertNestedInput
}

input PlantUpdateOneWithoutHumidityDataInput {
  create: PlantCreateWithoutHumidityDataInput
  connect: PlantWhereUniqueInput
  delete: Boolean
  update: PlantUpdateWithoutHumidityDataDataInput
  upsert: PlantUpsertWithoutHumidityDataInput
}

input PlantUpdateOneWithoutLoudnessDataInput {
  create: PlantCreateWithoutLoudnessDataInput
  connect: PlantWhereUniqueInput
  delete: Boolean
  update: PlantUpdateWithoutLoudnessDataDataInput
  upsert: PlantUpsertWithoutLoudnessDataInput
}

input PlantUpdateOneWithoutRadiationDataInput {
  create: PlantCreateWithoutRadiationDataInput
  connect: PlantWhereUniqueInput
  delete: Boolean
  update: PlantUpdateWithoutRadiationDataDataInput
  upsert: PlantUpsertWithoutRadiationDataInput
}

input PlantUpdateOneWithoutTemperatureDataInput {
  create: PlantCreateWithoutTemperatureDataInput
  connect: PlantWhereUniqueInput
  delete: Boolean
  update: PlantUpdateWithoutTemperatureDataDataInput
  upsert: PlantUpsertWithoutTemperatureDataInput
}

input PlantUpdateWithoutHumidityDataDataInput {
  name: String
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  temperatureData: SensorTemperatureUpdateManyWithoutPlantInput
  radiationData: SensorRadiationUpdateManyWithoutPlantInput
  loudnessData: SensorLoudnessUpdateManyWithoutPlantInput
}

input PlantUpdateWithoutLoudnessDataDataInput {
  name: String
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  humidityData: SensorHumidityUpdateManyWithoutPlantInput
  temperatureData: SensorTemperatureUpdateManyWithoutPlantInput
  radiationData: SensorRadiationUpdateManyWithoutPlantInput
}

input PlantUpdateWithoutOwnerDataInput {
  name: String
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  humidityData: SensorHumidityUpdateManyWithoutPlantInput
  temperatureData: SensorTemperatureUpdateManyWithoutPlantInput
  radiationData: SensorRadiationUpdateManyWithoutPlantInput
  loudnessData: SensorLoudnessUpdateManyWithoutPlantInput
}

input PlantUpdateWithoutRadiationDataDataInput {
  name: String
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  humidityData: SensorHumidityUpdateManyWithoutPlantInput
  temperatureData: SensorTemperatureUpdateManyWithoutPlantInput
  loudnessData: SensorLoudnessUpdateManyWithoutPlantInput
}

input PlantUpdateWithoutTemperatureDataDataInput {
  name: String
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  humidityData: SensorHumidityUpdateManyWithoutPlantInput
  radiationData: SensorRadiationUpdateManyWithoutPlantInput
  loudnessData: SensorLoudnessUpdateManyWithoutPlantInput
}

input PlantUpdateWithWhereUniqueWithoutOwnerInput {
  where: PlantWhereUniqueInput!
  data: PlantUpdateWithoutOwnerDataInput!
}

input PlantUpsertNestedInput {
  update: PlantUpdateDataInput!
  create: PlantCreateInput!
}

input PlantUpsertWithoutHumidityDataInput {
  update: PlantUpdateWithoutHumidityDataDataInput!
  create: PlantCreateWithoutHumidityDataInput!
}

input PlantUpsertWithoutLoudnessDataInput {
  update: PlantUpdateWithoutLoudnessDataDataInput!
  create: PlantCreateWithoutLoudnessDataInput!
}

input PlantUpsertWithoutRadiationDataInput {
  update: PlantUpdateWithoutRadiationDataDataInput!
  create: PlantCreateWithoutRadiationDataInput!
}

input PlantUpsertWithoutTemperatureDataInput {
  update: PlantUpdateWithoutTemperatureDataDataInput!
  create: PlantCreateWithoutTemperatureDataInput!
}

input PlantUpsertWithWhereUniqueWithoutOwnerInput {
  where: PlantWhereUniqueInput!
  update: PlantUpdateWithoutOwnerDataInput!
  create: PlantCreateWithoutOwnerInput!
}

input PlantWhereInput {
  """Logical AND on all given filters."""
  AND: [PlantWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  temperature_opt: Float

  """All values that are not equal to given value."""
  temperature_opt_not: Float

  """All values that are contained in given list."""
  temperature_opt_in: [Float!]

  """All values that are not contained in given list."""
  temperature_opt_not_in: [Float!]

  """All values less than the given value."""
  temperature_opt_lt: Float

  """All values less than or equal the given value."""
  temperature_opt_lte: Float

  """All values greater than the given value."""
  temperature_opt_gt: Float

  """All values greater than or equal the given value."""
  temperature_opt_gte: Float
  temperature_weight: Float

  """All values that are not equal to given value."""
  temperature_weight_not: Float

  """All values that are contained in given list."""
  temperature_weight_in: [Float!]

  """All values that are not contained in given list."""
  temperature_weight_not_in: [Float!]

  """All values less than the given value."""
  temperature_weight_lt: Float

  """All values less than or equal the given value."""
  temperature_weight_lte: Float

  """All values greater than the given value."""
  temperature_weight_gt: Float

  """All values greater than or equal the given value."""
  temperature_weight_gte: Float
  radiation_opt: Float

  """All values that are not equal to given value."""
  radiation_opt_not: Float

  """All values that are contained in given list."""
  radiation_opt_in: [Float!]

  """All values that are not contained in given list."""
  radiation_opt_not_in: [Float!]

  """All values less than the given value."""
  radiation_opt_lt: Float

  """All values less than or equal the given value."""
  radiation_opt_lte: Float

  """All values greater than the given value."""
  radiation_opt_gt: Float

  """All values greater than or equal the given value."""
  radiation_opt_gte: Float
  radiation_weight: Float

  """All values that are not equal to given value."""
  radiation_weight_not: Float

  """All values that are contained in given list."""
  radiation_weight_in: [Float!]

  """All values that are not contained in given list."""
  radiation_weight_not_in: [Float!]

  """All values less than the given value."""
  radiation_weight_lt: Float

  """All values less than or equal the given value."""
  radiation_weight_lte: Float

  """All values greater than the given value."""
  radiation_weight_gt: Float

  """All values greater than or equal the given value."""
  radiation_weight_gte: Float
  humidity_opt: Float

  """All values that are not equal to given value."""
  humidity_opt_not: Float

  """All values that are contained in given list."""
  humidity_opt_in: [Float!]

  """All values that are not contained in given list."""
  humidity_opt_not_in: [Float!]

  """All values less than the given value."""
  humidity_opt_lt: Float

  """All values less than or equal the given value."""
  humidity_opt_lte: Float

  """All values greater than the given value."""
  humidity_opt_gt: Float

  """All values greater than or equal the given value."""
  humidity_opt_gte: Float
  humidity_weight: Float

  """All values that are not equal to given value."""
  humidity_weight_not: Float

  """All values that are contained in given list."""
  humidity_weight_in: [Float!]

  """All values that are not contained in given list."""
  humidity_weight_not_in: [Float!]

  """All values less than the given value."""
  humidity_weight_lt: Float

  """All values less than or equal the given value."""
  humidity_weight_lte: Float

  """All values greater than the given value."""
  humidity_weight_gt: Float

  """All values greater than or equal the given value."""
  humidity_weight_gte: Float
  loudness_opt: Float

  """All values that are not equal to given value."""
  loudness_opt_not: Float

  """All values that are contained in given list."""
  loudness_opt_in: [Float!]

  """All values that are not contained in given list."""
  loudness_opt_not_in: [Float!]

  """All values less than the given value."""
  loudness_opt_lt: Float

  """All values less than or equal the given value."""
  loudness_opt_lte: Float

  """All values greater than the given value."""
  loudness_opt_gt: Float

  """All values greater than or equal the given value."""
  loudness_opt_gte: Float
  loudness_weight: Float

  """All values that are not equal to given value."""
  loudness_weight_not: Float

  """All values that are contained in given list."""
  loudness_weight_in: [Float!]

  """All values that are not contained in given list."""
  loudness_weight_not_in: [Float!]

  """All values less than the given value."""
  loudness_weight_lt: Float

  """All values less than or equal the given value."""
  loudness_weight_lte: Float

  """All values greater than the given value."""
  loudness_weight_gt: Float

  """All values greater than or equal the given value."""
  loudness_weight_gte: Float
  owner: UserWhereInput
  humidityData_every: SensorHumidityWhereInput
  humidityData_some: SensorHumidityWhereInput
  humidityData_none: SensorHumidityWhereInput
  temperatureData_every: SensorTemperatureWhereInput
  temperatureData_some: SensorTemperatureWhereInput
  temperatureData_none: SensorTemperatureWhereInput
  radiationData_every: SensorRadiationWhereInput
  radiationData_some: SensorRadiationWhereInput
  radiationData_none: SensorRadiationWhereInput
  loudnessData_every: SensorLoudnessWhereInput
  loudnessData_some: SensorLoudnessWhereInput
  loudnessData_none: SensorLoudnessWhereInput
}

input PlantWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  plants(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plant]!
  ardus(where: ArduWhereInput, orderBy: ArduOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ardu]!
  sensorTemperatures(where: SensorTemperatureWhereInput, orderBy: SensorTemperatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorTemperature]!
  sensorRadiations(where: SensorRadiationWhereInput, orderBy: SensorRadiationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorRadiation]!
  sensorHumidities(where: SensorHumidityWhereInput, orderBy: SensorHumidityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorHumidity]!
  sensorLoudnesses(where: SensorLoudnessWhereInput, orderBy: SensorLoudnessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorLoudness]!
  user(where: UserWhereUniqueInput!): User
  plant(where: PlantWhereUniqueInput!): Plant
  ardu(where: ArduWhereUniqueInput!): Ardu
  sensorTemperature(where: SensorTemperatureWhereUniqueInput!): SensorTemperature
  sensorRadiation(where: SensorRadiationWhereUniqueInput!): SensorRadiation
  sensorHumidity(where: SensorHumidityWhereUniqueInput!): SensorHumidity
  sensorLoudness(where: SensorLoudnessWhereUniqueInput!): SensorLoudness
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  plantsConnection(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlantConnection!
  ardusConnection(where: ArduWhereInput, orderBy: ArduOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArduConnection!
  sensorTemperaturesConnection(where: SensorTemperatureWhereInput, orderBy: SensorTemperatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SensorTemperatureConnection!
  sensorRadiationsConnection(where: SensorRadiationWhereInput, orderBy: SensorRadiationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SensorRadiationConnection!
  sensorHumiditiesConnection(where: SensorHumidityWhereInput, orderBy: SensorHumidityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SensorHumidityConnection!
  sensorLoudnessesConnection(where: SensorLoudnessWhereInput, orderBy: SensorLoudnessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SensorLoudnessConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type SensorHumidity implements Node {
  id: ID!
  plant(where: PlantWhereInput): Plant!
  timeStamp: DateTime!
  value: Float!
}

"""A connection to a list of items."""
type SensorHumidityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SensorHumidityEdge]!
  aggregate: AggregateSensorHumidity!
}

input SensorHumidityCreateInput {
  timeStamp: DateTime!
  value: Float!
  plant: PlantCreateOneWithoutHumidityDataInput!
}

input SensorHumidityCreateManyWithoutPlantInput {
  create: [SensorHumidityCreateWithoutPlantInput!]
  connect: [SensorHumidityWhereUniqueInput!]
}

input SensorHumidityCreateWithoutPlantInput {
  timeStamp: DateTime!
  value: Float!
}

"""An edge in a connection."""
type SensorHumidityEdge {
  """The item at the end of the edge."""
  node: SensorHumidity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SensorHumidityOrderByInput {
  id_ASC
  id_DESC
  timeStamp_ASC
  timeStamp_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SensorHumidityPreviousValues {
  id: ID!
  timeStamp: DateTime!
  value: Float!
}

type SensorHumiditySubscriptionPayload {
  mutation: MutationType!
  node: SensorHumidity
  updatedFields: [String!]
  previousValues: SensorHumidityPreviousValues
}

input SensorHumiditySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SensorHumiditySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SensorHumiditySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SensorHumiditySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SensorHumidityWhereInput
}

input SensorHumidityUpdateInput {
  timeStamp: DateTime
  value: Float
  plant: PlantUpdateOneWithoutHumidityDataInput
}

input SensorHumidityUpdateManyWithoutPlantInput {
  create: [SensorHumidityCreateWithoutPlantInput!]
  connect: [SensorHumidityWhereUniqueInput!]
  disconnect: [SensorHumidityWhereUniqueInput!]
  delete: [SensorHumidityWhereUniqueInput!]
  update: [SensorHumidityUpdateWithWhereUniqueWithoutPlantInput!]
  upsert: [SensorHumidityUpsertWithWhereUniqueWithoutPlantInput!]
}

input SensorHumidityUpdateWithoutPlantDataInput {
  timeStamp: DateTime
  value: Float
}

input SensorHumidityUpdateWithWhereUniqueWithoutPlantInput {
  where: SensorHumidityWhereUniqueInput!
  data: SensorHumidityUpdateWithoutPlantDataInput!
}

input SensorHumidityUpsertWithWhereUniqueWithoutPlantInput {
  where: SensorHumidityWhereUniqueInput!
  update: SensorHumidityUpdateWithoutPlantDataInput!
  create: SensorHumidityCreateWithoutPlantInput!
}

input SensorHumidityWhereInput {
  """Logical AND on all given filters."""
  AND: [SensorHumidityWhereInput!]

  """Logical OR on all given filters."""
  OR: [SensorHumidityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SensorHumidityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  timeStamp: DateTime

  """All values that are not equal to given value."""
  timeStamp_not: DateTime

  """All values that are contained in given list."""
  timeStamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timeStamp_not_in: [DateTime!]

  """All values less than the given value."""
  timeStamp_lt: DateTime

  """All values less than or equal the given value."""
  timeStamp_lte: DateTime

  """All values greater than the given value."""
  timeStamp_gt: DateTime

  """All values greater than or equal the given value."""
  timeStamp_gte: DateTime
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  plant: PlantWhereInput
}

input SensorHumidityWhereUniqueInput {
  id: ID
}

type SensorLoudness implements Node {
  id: ID!
  plant(where: PlantWhereInput): Plant!
  timeStamp: DateTime!
  value: Float!
}

"""A connection to a list of items."""
type SensorLoudnessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SensorLoudnessEdge]!
  aggregate: AggregateSensorLoudness!
}

input SensorLoudnessCreateInput {
  timeStamp: DateTime!
  value: Float!
  plant: PlantCreateOneWithoutLoudnessDataInput!
}

input SensorLoudnessCreateManyWithoutPlantInput {
  create: [SensorLoudnessCreateWithoutPlantInput!]
  connect: [SensorLoudnessWhereUniqueInput!]
}

input SensorLoudnessCreateWithoutPlantInput {
  timeStamp: DateTime!
  value: Float!
}

"""An edge in a connection."""
type SensorLoudnessEdge {
  """The item at the end of the edge."""
  node: SensorLoudness!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SensorLoudnessOrderByInput {
  id_ASC
  id_DESC
  timeStamp_ASC
  timeStamp_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SensorLoudnessPreviousValues {
  id: ID!
  timeStamp: DateTime!
  value: Float!
}

type SensorLoudnessSubscriptionPayload {
  mutation: MutationType!
  node: SensorLoudness
  updatedFields: [String!]
  previousValues: SensorLoudnessPreviousValues
}

input SensorLoudnessSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SensorLoudnessSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SensorLoudnessSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SensorLoudnessSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SensorLoudnessWhereInput
}

input SensorLoudnessUpdateInput {
  timeStamp: DateTime
  value: Float
  plant: PlantUpdateOneWithoutLoudnessDataInput
}

input SensorLoudnessUpdateManyWithoutPlantInput {
  create: [SensorLoudnessCreateWithoutPlantInput!]
  connect: [SensorLoudnessWhereUniqueInput!]
  disconnect: [SensorLoudnessWhereUniqueInput!]
  delete: [SensorLoudnessWhereUniqueInput!]
  update: [SensorLoudnessUpdateWithWhereUniqueWithoutPlantInput!]
  upsert: [SensorLoudnessUpsertWithWhereUniqueWithoutPlantInput!]
}

input SensorLoudnessUpdateWithoutPlantDataInput {
  timeStamp: DateTime
  value: Float
}

input SensorLoudnessUpdateWithWhereUniqueWithoutPlantInput {
  where: SensorLoudnessWhereUniqueInput!
  data: SensorLoudnessUpdateWithoutPlantDataInput!
}

input SensorLoudnessUpsertWithWhereUniqueWithoutPlantInput {
  where: SensorLoudnessWhereUniqueInput!
  update: SensorLoudnessUpdateWithoutPlantDataInput!
  create: SensorLoudnessCreateWithoutPlantInput!
}

input SensorLoudnessWhereInput {
  """Logical AND on all given filters."""
  AND: [SensorLoudnessWhereInput!]

  """Logical OR on all given filters."""
  OR: [SensorLoudnessWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SensorLoudnessWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  timeStamp: DateTime

  """All values that are not equal to given value."""
  timeStamp_not: DateTime

  """All values that are contained in given list."""
  timeStamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timeStamp_not_in: [DateTime!]

  """All values less than the given value."""
  timeStamp_lt: DateTime

  """All values less than or equal the given value."""
  timeStamp_lte: DateTime

  """All values greater than the given value."""
  timeStamp_gt: DateTime

  """All values greater than or equal the given value."""
  timeStamp_gte: DateTime
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  plant: PlantWhereInput
}

input SensorLoudnessWhereUniqueInput {
  id: ID
}

type SensorRadiation implements Node {
  id: ID!
  plant(where: PlantWhereInput): Plant!
  timeStamp: DateTime!
  value: Float!
}

"""A connection to a list of items."""
type SensorRadiationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SensorRadiationEdge]!
  aggregate: AggregateSensorRadiation!
}

input SensorRadiationCreateInput {
  timeStamp: DateTime!
  value: Float!
  plant: PlantCreateOneWithoutRadiationDataInput!
}

input SensorRadiationCreateManyWithoutPlantInput {
  create: [SensorRadiationCreateWithoutPlantInput!]
  connect: [SensorRadiationWhereUniqueInput!]
}

input SensorRadiationCreateWithoutPlantInput {
  timeStamp: DateTime!
  value: Float!
}

"""An edge in a connection."""
type SensorRadiationEdge {
  """The item at the end of the edge."""
  node: SensorRadiation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SensorRadiationOrderByInput {
  id_ASC
  id_DESC
  timeStamp_ASC
  timeStamp_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SensorRadiationPreviousValues {
  id: ID!
  timeStamp: DateTime!
  value: Float!
}

type SensorRadiationSubscriptionPayload {
  mutation: MutationType!
  node: SensorRadiation
  updatedFields: [String!]
  previousValues: SensorRadiationPreviousValues
}

input SensorRadiationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SensorRadiationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SensorRadiationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SensorRadiationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SensorRadiationWhereInput
}

input SensorRadiationUpdateInput {
  timeStamp: DateTime
  value: Float
  plant: PlantUpdateOneWithoutRadiationDataInput
}

input SensorRadiationUpdateManyWithoutPlantInput {
  create: [SensorRadiationCreateWithoutPlantInput!]
  connect: [SensorRadiationWhereUniqueInput!]
  disconnect: [SensorRadiationWhereUniqueInput!]
  delete: [SensorRadiationWhereUniqueInput!]
  update: [SensorRadiationUpdateWithWhereUniqueWithoutPlantInput!]
  upsert: [SensorRadiationUpsertWithWhereUniqueWithoutPlantInput!]
}

input SensorRadiationUpdateWithoutPlantDataInput {
  timeStamp: DateTime
  value: Float
}

input SensorRadiationUpdateWithWhereUniqueWithoutPlantInput {
  where: SensorRadiationWhereUniqueInput!
  data: SensorRadiationUpdateWithoutPlantDataInput!
}

input SensorRadiationUpsertWithWhereUniqueWithoutPlantInput {
  where: SensorRadiationWhereUniqueInput!
  update: SensorRadiationUpdateWithoutPlantDataInput!
  create: SensorRadiationCreateWithoutPlantInput!
}

input SensorRadiationWhereInput {
  """Logical AND on all given filters."""
  AND: [SensorRadiationWhereInput!]

  """Logical OR on all given filters."""
  OR: [SensorRadiationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SensorRadiationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  timeStamp: DateTime

  """All values that are not equal to given value."""
  timeStamp_not: DateTime

  """All values that are contained in given list."""
  timeStamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timeStamp_not_in: [DateTime!]

  """All values less than the given value."""
  timeStamp_lt: DateTime

  """All values less than or equal the given value."""
  timeStamp_lte: DateTime

  """All values greater than the given value."""
  timeStamp_gt: DateTime

  """All values greater than or equal the given value."""
  timeStamp_gte: DateTime
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  plant: PlantWhereInput
}

input SensorRadiationWhereUniqueInput {
  id: ID
}

type SensorTemperature implements Node {
  id: ID!
  plant(where: PlantWhereInput): Plant!
  timeStamp: DateTime!
  value: Float!
}

"""A connection to a list of items."""
type SensorTemperatureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SensorTemperatureEdge]!
  aggregate: AggregateSensorTemperature!
}

input SensorTemperatureCreateInput {
  timeStamp: DateTime!
  value: Float!
  plant: PlantCreateOneWithoutTemperatureDataInput!
}

input SensorTemperatureCreateManyWithoutPlantInput {
  create: [SensorTemperatureCreateWithoutPlantInput!]
  connect: [SensorTemperatureWhereUniqueInput!]
}

input SensorTemperatureCreateWithoutPlantInput {
  timeStamp: DateTime!
  value: Float!
}

"""An edge in a connection."""
type SensorTemperatureEdge {
  """The item at the end of the edge."""
  node: SensorTemperature!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SensorTemperatureOrderByInput {
  id_ASC
  id_DESC
  timeStamp_ASC
  timeStamp_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SensorTemperaturePreviousValues {
  id: ID!
  timeStamp: DateTime!
  value: Float!
}

type SensorTemperatureSubscriptionPayload {
  mutation: MutationType!
  node: SensorTemperature
  updatedFields: [String!]
  previousValues: SensorTemperaturePreviousValues
}

input SensorTemperatureSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SensorTemperatureSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SensorTemperatureSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SensorTemperatureSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SensorTemperatureWhereInput
}

input SensorTemperatureUpdateInput {
  timeStamp: DateTime
  value: Float
  plant: PlantUpdateOneWithoutTemperatureDataInput
}

input SensorTemperatureUpdateManyWithoutPlantInput {
  create: [SensorTemperatureCreateWithoutPlantInput!]
  connect: [SensorTemperatureWhereUniqueInput!]
  disconnect: [SensorTemperatureWhereUniqueInput!]
  delete: [SensorTemperatureWhereUniqueInput!]
  update: [SensorTemperatureUpdateWithWhereUniqueWithoutPlantInput!]
  upsert: [SensorTemperatureUpsertWithWhereUniqueWithoutPlantInput!]
}

input SensorTemperatureUpdateWithoutPlantDataInput {
  timeStamp: DateTime
  value: Float
}

input SensorTemperatureUpdateWithWhereUniqueWithoutPlantInput {
  where: SensorTemperatureWhereUniqueInput!
  data: SensorTemperatureUpdateWithoutPlantDataInput!
}

input SensorTemperatureUpsertWithWhereUniqueWithoutPlantInput {
  where: SensorTemperatureWhereUniqueInput!
  update: SensorTemperatureUpdateWithoutPlantDataInput!
  create: SensorTemperatureCreateWithoutPlantInput!
}

input SensorTemperatureWhereInput {
  """Logical AND on all given filters."""
  AND: [SensorTemperatureWhereInput!]

  """Logical OR on all given filters."""
  OR: [SensorTemperatureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SensorTemperatureWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  timeStamp: DateTime

  """All values that are not equal to given value."""
  timeStamp_not: DateTime

  """All values that are contained in given list."""
  timeStamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timeStamp_not_in: [DateTime!]

  """All values less than the given value."""
  timeStamp_lt: DateTime

  """All values less than or equal the given value."""
  timeStamp_lte: DateTime

  """All values greater than the given value."""
  timeStamp_gt: DateTime

  """All values greater than or equal the given value."""
  timeStamp_gte: DateTime
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  plant: PlantWhereInput
}

input SensorTemperatureWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  plant(where: PlantSubscriptionWhereInput): PlantSubscriptionPayload
  ardu(where: ArduSubscriptionWhereInput): ArduSubscriptionPayload
  sensorTemperature(where: SensorTemperatureSubscriptionWhereInput): SensorTemperatureSubscriptionPayload
  sensorRadiation(where: SensorRadiationSubscriptionWhereInput): SensorRadiationSubscriptionPayload
  sensorHumidity(where: SensorHumiditySubscriptionWhereInput): SensorHumiditySubscriptionPayload
  sensorLoudness(where: SensorLoudnessSubscriptionWhereInput): SensorLoudnessSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
  password: String!
  plants(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plant!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  email: String!
  password: String!
  plants: PlantCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutPlantsInput {
  create: UserCreateWithoutPlantsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPlantsInput {
  username: String!
  email: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  plants: PlantUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutPlantsInput {
  create: UserCreateWithoutPlantsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutPlantsDataInput
  upsert: UserUpsertWithoutPlantsInput
}

input UserUpdateWithoutPlantsDataInput {
  username: String
  email: String
  password: String
}

input UserUpsertWithoutPlantsInput {
  update: UserUpdateWithoutPlantsDataInput!
  create: UserCreateWithoutPlantsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  plants_every: PlantWhereInput
  plants_some: PlantWhereInput
  plants_none: PlantWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

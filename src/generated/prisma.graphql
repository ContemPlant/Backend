# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Ardu implements Node {
  id: ID!
  loadedPlant(where: PlantWhereInput): Plant
}

type Plant implements Node {
  id: ID!
  owner(where: UserWhereInput): User!
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  humidityData(where: SensorHumidityWhereInput, orderBy: SensorHumidityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorHumidity!]
  temperatureData(where: SensorTemperatureWhereInput, orderBy: SensorTemperatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorTemperature!]
  radiationData(where: SensorRadiationWhereInput, orderBy: SensorRadiationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorRadiation!]
  waterData(where: SensorWaterWhereInput, orderBy: SensorWaterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorWater!]
}

type SensorHumidity implements Node {
  id: ID!
  plant(where: PlantWhereInput): Plant!
  timeStamp: DateTime!
  value: Float!
}

type SensorRadiation implements Node {
  id: ID!
  plant(where: PlantWhereInput): Plant!
  timeStamp: DateTime!
  value: Float!
}

type SensorTemperature implements Node {
  id: ID!
  plant(where: PlantWhereInput): Plant!
  timeStamp: DateTime!
  value: Float!
}

type SensorWater implements Node {
  id: ID!
  plant(where: PlantWhereInput): Plant!
  timeStamp: DateTime!
  value: Float!
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  plants(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plant!]
}


#
# Other Types
#

type AggregateArdu {
  count: Int!
}

type AggregatePlant {
  count: Int!
}

type AggregateSensorHumidity {
  count: Int!
}

type AggregateSensorRadiation {
  count: Int!
}

type AggregateSensorTemperature {
  count: Int!
}

type AggregateSensorWater {
  count: Int!
}

type AggregateUser {
  count: Int!
}

"""
A connection to a list of items.
"""
type ArduConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ArduEdge]!
  aggregate: AggregateArdu!
}

input ArduCreateInput {
  loadedPlant: PlantCreateOneInput
}

"""
An edge in a connection.
"""
type ArduEdge {
  """
  The item at the end of the edge.
  """
  node: Ardu!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ArduOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ArduPreviousValues {
  id: ID!
}

type ArduSubscriptionPayload {
  mutation: MutationType!
  node: Ardu
  updatedFields: [String!]
  previousValues: ArduPreviousValues
}

input ArduSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ArduSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ArduSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ArduWhereInput
}

input ArduUpdateInput {
  loadedPlant: PlantUpdateOneInput
}

input ArduWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ArduWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ArduWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  loadedPlant: PlantWhereInput
}

input ArduWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPlant(data: PlantCreateInput!): Plant!
  createArdu(data: ArduCreateInput!): Ardu!
  createSensorTemperature(data: SensorTemperatureCreateInput!): SensorTemperature!
  createSensorRadiation(data: SensorRadiationCreateInput!): SensorRadiation!
  createSensorHumidity(data: SensorHumidityCreateInput!): SensorHumidity!
  createSensorWater(data: SensorWaterCreateInput!): SensorWater!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePlant(data: PlantUpdateInput!, where: PlantWhereUniqueInput!): Plant
  updateArdu(data: ArduUpdateInput!, where: ArduWhereUniqueInput!): Ardu
  updateSensorTemperature(data: SensorTemperatureUpdateInput!, where: SensorTemperatureWhereUniqueInput!): SensorTemperature
  updateSensorRadiation(data: SensorRadiationUpdateInput!, where: SensorRadiationWhereUniqueInput!): SensorRadiation
  updateSensorHumidity(data: SensorHumidityUpdateInput!, where: SensorHumidityWhereUniqueInput!): SensorHumidity
  updateSensorWater(data: SensorWaterUpdateInput!, where: SensorWaterWhereUniqueInput!): SensorWater
  deleteUser(where: UserWhereUniqueInput!): User
  deletePlant(where: PlantWhereUniqueInput!): Plant
  deleteArdu(where: ArduWhereUniqueInput!): Ardu
  deleteSensorTemperature(where: SensorTemperatureWhereUniqueInput!): SensorTemperature
  deleteSensorRadiation(where: SensorRadiationWhereUniqueInput!): SensorRadiation
  deleteSensorHumidity(where: SensorHumidityWhereUniqueInput!): SensorHumidity
  deleteSensorWater(where: SensorWaterWhereUniqueInput!): SensorWater
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPlant(where: PlantWhereUniqueInput!, create: PlantCreateInput!, update: PlantUpdateInput!): Plant!
  upsertArdu(where: ArduWhereUniqueInput!, create: ArduCreateInput!, update: ArduUpdateInput!): Ardu!
  upsertSensorTemperature(where: SensorTemperatureWhereUniqueInput!, create: SensorTemperatureCreateInput!, update: SensorTemperatureUpdateInput!): SensorTemperature!
  upsertSensorRadiation(where: SensorRadiationWhereUniqueInput!, create: SensorRadiationCreateInput!, update: SensorRadiationUpdateInput!): SensorRadiation!
  upsertSensorHumidity(where: SensorHumidityWhereUniqueInput!, create: SensorHumidityCreateInput!, update: SensorHumidityUpdateInput!): SensorHumidity!
  upsertSensorWater(where: SensorWaterWhereUniqueInput!, create: SensorWaterCreateInput!, update: SensorWaterUpdateInput!): SensorWater!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyPlants(data: PlantUpdateInput!, where: PlantWhereInput): BatchPayload!
  updateManyArdus(data: ArduUpdateInput!, where: ArduWhereInput): BatchPayload!
  updateManySensorTemperatures(data: SensorTemperatureUpdateInput!, where: SensorTemperatureWhereInput): BatchPayload!
  updateManySensorRadiations(data: SensorRadiationUpdateInput!, where: SensorRadiationWhereInput): BatchPayload!
  updateManySensorHumidities(data: SensorHumidityUpdateInput!, where: SensorHumidityWhereInput): BatchPayload!
  updateManySensorWaters(data: SensorWaterUpdateInput!, where: SensorWaterWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPlants(where: PlantWhereInput): BatchPayload!
  deleteManyArdus(where: ArduWhereInput): BatchPayload!
  deleteManySensorTemperatures(where: SensorTemperatureWhereInput): BatchPayload!
  deleteManySensorRadiations(where: SensorRadiationWhereInput): BatchPayload!
  deleteManySensorHumidities(where: SensorHumidityWhereInput): BatchPayload!
  deleteManySensorWaters(where: SensorWaterWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PlantConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PlantEdge]!
  aggregate: AggregatePlant!
}

input PlantCreateInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  owner: UserCreateOneWithoutPlantsInput!
  humidityData: SensorHumidityCreateManyWithoutPlantInput
  temperatureData: SensorTemperatureCreateManyWithoutPlantInput
  radiationData: SensorRadiationCreateManyWithoutPlantInput
  waterData: SensorWaterCreateManyWithoutPlantInput
}

input PlantCreateManyWithoutOwnerInput {
  create: [PlantCreateWithoutOwnerInput!]
  connect: [PlantWhereUniqueInput!]
}

input PlantCreateOneInput {
  create: PlantCreateInput
  connect: PlantWhereUniqueInput
}

input PlantCreateOneWithoutHumidityDataInput {
  create: PlantCreateWithoutHumidityDataInput
  connect: PlantWhereUniqueInput
}

input PlantCreateOneWithoutRadiationDataInput {
  create: PlantCreateWithoutRadiationDataInput
  connect: PlantWhereUniqueInput
}

input PlantCreateOneWithoutTemperatureDataInput {
  create: PlantCreateWithoutTemperatureDataInput
  connect: PlantWhereUniqueInput
}

input PlantCreateOneWithoutWaterDataInput {
  create: PlantCreateWithoutWaterDataInput
  connect: PlantWhereUniqueInput
}

input PlantCreateWithoutHumidityDataInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  owner: UserCreateOneWithoutPlantsInput!
  temperatureData: SensorTemperatureCreateManyWithoutPlantInput
  radiationData: SensorRadiationCreateManyWithoutPlantInput
  waterData: SensorWaterCreateManyWithoutPlantInput
}

input PlantCreateWithoutOwnerInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  humidityData: SensorHumidityCreateManyWithoutPlantInput
  temperatureData: SensorTemperatureCreateManyWithoutPlantInput
  radiationData: SensorRadiationCreateManyWithoutPlantInput
  waterData: SensorWaterCreateManyWithoutPlantInput
}

input PlantCreateWithoutRadiationDataInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  owner: UserCreateOneWithoutPlantsInput!
  humidityData: SensorHumidityCreateManyWithoutPlantInput
  temperatureData: SensorTemperatureCreateManyWithoutPlantInput
  waterData: SensorWaterCreateManyWithoutPlantInput
}

input PlantCreateWithoutTemperatureDataInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  owner: UserCreateOneWithoutPlantsInput!
  humidityData: SensorHumidityCreateManyWithoutPlantInput
  radiationData: SensorRadiationCreateManyWithoutPlantInput
  waterData: SensorWaterCreateManyWithoutPlantInput
}

input PlantCreateWithoutWaterDataInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  owner: UserCreateOneWithoutPlantsInput!
  humidityData: SensorHumidityCreateManyWithoutPlantInput
  temperatureData: SensorTemperatureCreateManyWithoutPlantInput
  radiationData: SensorRadiationCreateManyWithoutPlantInput
}

"""
An edge in a connection.
"""
type PlantEdge {
  """
  The item at the end of the edge.
  """
  node: Plant!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PlantOrderByInput {
  id_ASC
  id_DESC
  temperature_opt_ASC
  temperature_opt_DESC
  temperature_weight_ASC
  temperature_weight_DESC
  radiation_opt_ASC
  radiation_opt_DESC
  radiation_weight_ASC
  radiation_weight_DESC
  humidity_opt_ASC
  humidity_opt_DESC
  humidity_weight_ASC
  humidity_weight_DESC
  water_opt_ASC
  water_opt_DESC
  water_weight_ASC
  water_weight_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PlantPreviousValues {
  id: ID!
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
}

type PlantSubscriptionPayload {
  mutation: MutationType!
  node: Plant
  updatedFields: [String!]
  previousValues: PlantPreviousValues
}

input PlantSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PlantSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PlantSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlantWhereInput
}

input PlantUpdateDataInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  humidityData: SensorHumidityUpdateManyWithoutPlantInput
  temperatureData: SensorTemperatureUpdateManyWithoutPlantInput
  radiationData: SensorRadiationUpdateManyWithoutPlantInput
  waterData: SensorWaterUpdateManyWithoutPlantInput
}

input PlantUpdateInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  humidityData: SensorHumidityUpdateManyWithoutPlantInput
  temperatureData: SensorTemperatureUpdateManyWithoutPlantInput
  radiationData: SensorRadiationUpdateManyWithoutPlantInput
  waterData: SensorWaterUpdateManyWithoutPlantInput
}

input PlantUpdateManyWithoutOwnerInput {
  create: [PlantCreateWithoutOwnerInput!]
  connect: [PlantWhereUniqueInput!]
  disconnect: [PlantWhereUniqueInput!]
  delete: [PlantWhereUniqueInput!]
  update: [PlantUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [PlantUpsertWithWhereUniqueWithoutOwnerInput!]
}

input PlantUpdateOneInput {
  create: PlantCreateInput
  connect: PlantWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PlantUpdateDataInput
  upsert: PlantUpsertNestedInput
}

input PlantUpdateOneWithoutHumidityDataInput {
  create: PlantCreateWithoutHumidityDataInput
  connect: PlantWhereUniqueInput
  delete: Boolean
  update: PlantUpdateWithoutHumidityDataDataInput
  upsert: PlantUpsertWithoutHumidityDataInput
}

input PlantUpdateOneWithoutRadiationDataInput {
  create: PlantCreateWithoutRadiationDataInput
  connect: PlantWhereUniqueInput
  delete: Boolean
  update: PlantUpdateWithoutRadiationDataDataInput
  upsert: PlantUpsertWithoutRadiationDataInput
}

input PlantUpdateOneWithoutTemperatureDataInput {
  create: PlantCreateWithoutTemperatureDataInput
  connect: PlantWhereUniqueInput
  delete: Boolean
  update: PlantUpdateWithoutTemperatureDataDataInput
  upsert: PlantUpsertWithoutTemperatureDataInput
}

input PlantUpdateOneWithoutWaterDataInput {
  create: PlantCreateWithoutWaterDataInput
  connect: PlantWhereUniqueInput
  delete: Boolean
  update: PlantUpdateWithoutWaterDataDataInput
  upsert: PlantUpsertWithoutWaterDataInput
}

input PlantUpdateWithoutHumidityDataDataInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  temperatureData: SensorTemperatureUpdateManyWithoutPlantInput
  radiationData: SensorRadiationUpdateManyWithoutPlantInput
  waterData: SensorWaterUpdateManyWithoutPlantInput
}

input PlantUpdateWithoutOwnerDataInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  humidityData: SensorHumidityUpdateManyWithoutPlantInput
  temperatureData: SensorTemperatureUpdateManyWithoutPlantInput
  radiationData: SensorRadiationUpdateManyWithoutPlantInput
  waterData: SensorWaterUpdateManyWithoutPlantInput
}

input PlantUpdateWithoutRadiationDataDataInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  humidityData: SensorHumidityUpdateManyWithoutPlantInput
  temperatureData: SensorTemperatureUpdateManyWithoutPlantInput
  waterData: SensorWaterUpdateManyWithoutPlantInput
}

input PlantUpdateWithoutTemperatureDataDataInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  humidityData: SensorHumidityUpdateManyWithoutPlantInput
  radiationData: SensorRadiationUpdateManyWithoutPlantInput
  waterData: SensorWaterUpdateManyWithoutPlantInput
}

input PlantUpdateWithoutWaterDataDataInput {
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  water_opt: Float
  water_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  humidityData: SensorHumidityUpdateManyWithoutPlantInput
  temperatureData: SensorTemperatureUpdateManyWithoutPlantInput
  radiationData: SensorRadiationUpdateManyWithoutPlantInput
}

input PlantUpdateWithWhereUniqueWithoutOwnerInput {
  where: PlantWhereUniqueInput!
  data: PlantUpdateWithoutOwnerDataInput!
}

input PlantUpsertNestedInput {
  update: PlantUpdateDataInput!
  create: PlantCreateInput!
}

input PlantUpsertWithoutHumidityDataInput {
  update: PlantUpdateWithoutHumidityDataDataInput!
  create: PlantCreateWithoutHumidityDataInput!
}

input PlantUpsertWithoutRadiationDataInput {
  update: PlantUpdateWithoutRadiationDataDataInput!
  create: PlantCreateWithoutRadiationDataInput!
}

input PlantUpsertWithoutTemperatureDataInput {
  update: PlantUpdateWithoutTemperatureDataDataInput!
  create: PlantCreateWithoutTemperatureDataInput!
}

input PlantUpsertWithoutWaterDataInput {
  update: PlantUpdateWithoutWaterDataDataInput!
  create: PlantCreateWithoutWaterDataInput!
}

input PlantUpsertWithWhereUniqueWithoutOwnerInput {
  where: PlantWhereUniqueInput!
  update: PlantUpdateWithoutOwnerDataInput!
  create: PlantCreateWithoutOwnerInput!
}

input PlantWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PlantWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PlantWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  temperature_opt: Float
  """
  All values that are not equal to given value.
  """
  temperature_opt_not: Float
  """
  All values that are contained in given list.
  """
  temperature_opt_in: [Float!]
  """
  All values that are not contained in given list.
  """
  temperature_opt_not_in: [Float!]
  """
  All values less than the given value.
  """
  temperature_opt_lt: Float
  """
  All values less than or equal the given value.
  """
  temperature_opt_lte: Float
  """
  All values greater than the given value.
  """
  temperature_opt_gt: Float
  """
  All values greater than or equal the given value.
  """
  temperature_opt_gte: Float
  temperature_weight: Float
  """
  All values that are not equal to given value.
  """
  temperature_weight_not: Float
  """
  All values that are contained in given list.
  """
  temperature_weight_in: [Float!]
  """
  All values that are not contained in given list.
  """
  temperature_weight_not_in: [Float!]
  """
  All values less than the given value.
  """
  temperature_weight_lt: Float
  """
  All values less than or equal the given value.
  """
  temperature_weight_lte: Float
  """
  All values greater than the given value.
  """
  temperature_weight_gt: Float
  """
  All values greater than or equal the given value.
  """
  temperature_weight_gte: Float
  radiation_opt: Float
  """
  All values that are not equal to given value.
  """
  radiation_opt_not: Float
  """
  All values that are contained in given list.
  """
  radiation_opt_in: [Float!]
  """
  All values that are not contained in given list.
  """
  radiation_opt_not_in: [Float!]
  """
  All values less than the given value.
  """
  radiation_opt_lt: Float
  """
  All values less than or equal the given value.
  """
  radiation_opt_lte: Float
  """
  All values greater than the given value.
  """
  radiation_opt_gt: Float
  """
  All values greater than or equal the given value.
  """
  radiation_opt_gte: Float
  radiation_weight: Float
  """
  All values that are not equal to given value.
  """
  radiation_weight_not: Float
  """
  All values that are contained in given list.
  """
  radiation_weight_in: [Float!]
  """
  All values that are not contained in given list.
  """
  radiation_weight_not_in: [Float!]
  """
  All values less than the given value.
  """
  radiation_weight_lt: Float
  """
  All values less than or equal the given value.
  """
  radiation_weight_lte: Float
  """
  All values greater than the given value.
  """
  radiation_weight_gt: Float
  """
  All values greater than or equal the given value.
  """
  radiation_weight_gte: Float
  humidity_opt: Float
  """
  All values that are not equal to given value.
  """
  humidity_opt_not: Float
  """
  All values that are contained in given list.
  """
  humidity_opt_in: [Float!]
  """
  All values that are not contained in given list.
  """
  humidity_opt_not_in: [Float!]
  """
  All values less than the given value.
  """
  humidity_opt_lt: Float
  """
  All values less than or equal the given value.
  """
  humidity_opt_lte: Float
  """
  All values greater than the given value.
  """
  humidity_opt_gt: Float
  """
  All values greater than or equal the given value.
  """
  humidity_opt_gte: Float
  humidity_weight: Float
  """
  All values that are not equal to given value.
  """
  humidity_weight_not: Float
  """
  All values that are contained in given list.
  """
  humidity_weight_in: [Float!]
  """
  All values that are not contained in given list.
  """
  humidity_weight_not_in: [Float!]
  """
  All values less than the given value.
  """
  humidity_weight_lt: Float
  """
  All values less than or equal the given value.
  """
  humidity_weight_lte: Float
  """
  All values greater than the given value.
  """
  humidity_weight_gt: Float
  """
  All values greater than or equal the given value.
  """
  humidity_weight_gte: Float
  water_opt: Float
  """
  All values that are not equal to given value.
  """
  water_opt_not: Float
  """
  All values that are contained in given list.
  """
  water_opt_in: [Float!]
  """
  All values that are not contained in given list.
  """
  water_opt_not_in: [Float!]
  """
  All values less than the given value.
  """
  water_opt_lt: Float
  """
  All values less than or equal the given value.
  """
  water_opt_lte: Float
  """
  All values greater than the given value.
  """
  water_opt_gt: Float
  """
  All values greater than or equal the given value.
  """
  water_opt_gte: Float
  water_weight: Float
  """
  All values that are not equal to given value.
  """
  water_weight_not: Float
  """
  All values that are contained in given list.
  """
  water_weight_in: [Float!]
  """
  All values that are not contained in given list.
  """
  water_weight_not_in: [Float!]
  """
  All values less than the given value.
  """
  water_weight_lt: Float
  """
  All values less than or equal the given value.
  """
  water_weight_lte: Float
  """
  All values greater than the given value.
  """
  water_weight_gt: Float
  """
  All values greater than or equal the given value.
  """
  water_weight_gte: Float
  owner: UserWhereInput
  humidityData_every: SensorHumidityWhereInput
  humidityData_some: SensorHumidityWhereInput
  humidityData_none: SensorHumidityWhereInput
  temperatureData_every: SensorTemperatureWhereInput
  temperatureData_some: SensorTemperatureWhereInput
  temperatureData_none: SensorTemperatureWhereInput
  radiationData_every: SensorRadiationWhereInput
  radiationData_some: SensorRadiationWhereInput
  radiationData_none: SensorRadiationWhereInput
  waterData_every: SensorWaterWhereInput
  waterData_some: SensorWaterWhereInput
  waterData_none: SensorWaterWhereInput
}

input PlantWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  plants(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plant]!
  ardus(where: ArduWhereInput, orderBy: ArduOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ardu]!
  sensorTemperatures(where: SensorTemperatureWhereInput, orderBy: SensorTemperatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorTemperature]!
  sensorRadiations(where: SensorRadiationWhereInput, orderBy: SensorRadiationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorRadiation]!
  sensorHumidities(where: SensorHumidityWhereInput, orderBy: SensorHumidityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorHumidity]!
  sensorWaters(where: SensorWaterWhereInput, orderBy: SensorWaterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorWater]!
  user(where: UserWhereUniqueInput!): User
  plant(where: PlantWhereUniqueInput!): Plant
  ardu(where: ArduWhereUniqueInput!): Ardu
  sensorTemperature(where: SensorTemperatureWhereUniqueInput!): SensorTemperature
  sensorRadiation(where: SensorRadiationWhereUniqueInput!): SensorRadiation
  sensorHumidity(where: SensorHumidityWhereUniqueInput!): SensorHumidity
  sensorWater(where: SensorWaterWhereUniqueInput!): SensorWater
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  plantsConnection(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlantConnection!
  ardusConnection(where: ArduWhereInput, orderBy: ArduOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArduConnection!
  sensorTemperaturesConnection(where: SensorTemperatureWhereInput, orderBy: SensorTemperatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SensorTemperatureConnection!
  sensorRadiationsConnection(where: SensorRadiationWhereInput, orderBy: SensorRadiationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SensorRadiationConnection!
  sensorHumiditiesConnection(where: SensorHumidityWhereInput, orderBy: SensorHumidityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SensorHumidityConnection!
  sensorWatersConnection(where: SensorWaterWhereInput, orderBy: SensorWaterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SensorWaterConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

"""
A connection to a list of items.
"""
type SensorHumidityConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [SensorHumidityEdge]!
  aggregate: AggregateSensorHumidity!
}

input SensorHumidityCreateInput {
  timeStamp: DateTime!
  value: Float!
  plant: PlantCreateOneWithoutHumidityDataInput!
}

input SensorHumidityCreateManyWithoutPlantInput {
  create: [SensorHumidityCreateWithoutPlantInput!]
  connect: [SensorHumidityWhereUniqueInput!]
}

input SensorHumidityCreateWithoutPlantInput {
  timeStamp: DateTime!
  value: Float!
}

"""
An edge in a connection.
"""
type SensorHumidityEdge {
  """
  The item at the end of the edge.
  """
  node: SensorHumidity!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum SensorHumidityOrderByInput {
  id_ASC
  id_DESC
  timeStamp_ASC
  timeStamp_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SensorHumidityPreviousValues {
  id: ID!
  timeStamp: DateTime!
  value: Float!
}

type SensorHumiditySubscriptionPayload {
  mutation: MutationType!
  node: SensorHumidity
  updatedFields: [String!]
  previousValues: SensorHumidityPreviousValues
}

input SensorHumiditySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SensorHumiditySubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SensorHumiditySubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SensorHumidityWhereInput
}

input SensorHumidityUpdateInput {
  timeStamp: DateTime
  value: Float
  plant: PlantUpdateOneWithoutHumidityDataInput
}

input SensorHumidityUpdateManyWithoutPlantInput {
  create: [SensorHumidityCreateWithoutPlantInput!]
  connect: [SensorHumidityWhereUniqueInput!]
  disconnect: [SensorHumidityWhereUniqueInput!]
  delete: [SensorHumidityWhereUniqueInput!]
  update: [SensorHumidityUpdateWithWhereUniqueWithoutPlantInput!]
  upsert: [SensorHumidityUpsertWithWhereUniqueWithoutPlantInput!]
}

input SensorHumidityUpdateWithoutPlantDataInput {
  timeStamp: DateTime
  value: Float
}

input SensorHumidityUpdateWithWhereUniqueWithoutPlantInput {
  where: SensorHumidityWhereUniqueInput!
  data: SensorHumidityUpdateWithoutPlantDataInput!
}

input SensorHumidityUpsertWithWhereUniqueWithoutPlantInput {
  where: SensorHumidityWhereUniqueInput!
  update: SensorHumidityUpdateWithoutPlantDataInput!
  create: SensorHumidityCreateWithoutPlantInput!
}

input SensorHumidityWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SensorHumidityWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SensorHumidityWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  timeStamp: DateTime
  """
  All values that are not equal to given value.
  """
  timeStamp_not: DateTime
  """
  All values that are contained in given list.
  """
  timeStamp_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  timeStamp_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  timeStamp_lt: DateTime
  """
  All values less than or equal the given value.
  """
  timeStamp_lte: DateTime
  """
  All values greater than the given value.
  """
  timeStamp_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  timeStamp_gte: DateTime
  value: Float
  """
  All values that are not equal to given value.
  """
  value_not: Float
  """
  All values that are contained in given list.
  """
  value_in: [Float!]
  """
  All values that are not contained in given list.
  """
  value_not_in: [Float!]
  """
  All values less than the given value.
  """
  value_lt: Float
  """
  All values less than or equal the given value.
  """
  value_lte: Float
  """
  All values greater than the given value.
  """
  value_gt: Float
  """
  All values greater than or equal the given value.
  """
  value_gte: Float
  plant: PlantWhereInput
}

input SensorHumidityWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type SensorRadiationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [SensorRadiationEdge]!
  aggregate: AggregateSensorRadiation!
}

input SensorRadiationCreateInput {
  timeStamp: DateTime!
  value: Float!
  plant: PlantCreateOneWithoutRadiationDataInput!
}

input SensorRadiationCreateManyWithoutPlantInput {
  create: [SensorRadiationCreateWithoutPlantInput!]
  connect: [SensorRadiationWhereUniqueInput!]
}

input SensorRadiationCreateWithoutPlantInput {
  timeStamp: DateTime!
  value: Float!
}

"""
An edge in a connection.
"""
type SensorRadiationEdge {
  """
  The item at the end of the edge.
  """
  node: SensorRadiation!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum SensorRadiationOrderByInput {
  id_ASC
  id_DESC
  timeStamp_ASC
  timeStamp_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SensorRadiationPreviousValues {
  id: ID!
  timeStamp: DateTime!
  value: Float!
}

type SensorRadiationSubscriptionPayload {
  mutation: MutationType!
  node: SensorRadiation
  updatedFields: [String!]
  previousValues: SensorRadiationPreviousValues
}

input SensorRadiationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SensorRadiationSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SensorRadiationSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SensorRadiationWhereInput
}

input SensorRadiationUpdateInput {
  timeStamp: DateTime
  value: Float
  plant: PlantUpdateOneWithoutRadiationDataInput
}

input SensorRadiationUpdateManyWithoutPlantInput {
  create: [SensorRadiationCreateWithoutPlantInput!]
  connect: [SensorRadiationWhereUniqueInput!]
  disconnect: [SensorRadiationWhereUniqueInput!]
  delete: [SensorRadiationWhereUniqueInput!]
  update: [SensorRadiationUpdateWithWhereUniqueWithoutPlantInput!]
  upsert: [SensorRadiationUpsertWithWhereUniqueWithoutPlantInput!]
}

input SensorRadiationUpdateWithoutPlantDataInput {
  timeStamp: DateTime
  value: Float
}

input SensorRadiationUpdateWithWhereUniqueWithoutPlantInput {
  where: SensorRadiationWhereUniqueInput!
  data: SensorRadiationUpdateWithoutPlantDataInput!
}

input SensorRadiationUpsertWithWhereUniqueWithoutPlantInput {
  where: SensorRadiationWhereUniqueInput!
  update: SensorRadiationUpdateWithoutPlantDataInput!
  create: SensorRadiationCreateWithoutPlantInput!
}

input SensorRadiationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SensorRadiationWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SensorRadiationWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  timeStamp: DateTime
  """
  All values that are not equal to given value.
  """
  timeStamp_not: DateTime
  """
  All values that are contained in given list.
  """
  timeStamp_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  timeStamp_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  timeStamp_lt: DateTime
  """
  All values less than or equal the given value.
  """
  timeStamp_lte: DateTime
  """
  All values greater than the given value.
  """
  timeStamp_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  timeStamp_gte: DateTime
  value: Float
  """
  All values that are not equal to given value.
  """
  value_not: Float
  """
  All values that are contained in given list.
  """
  value_in: [Float!]
  """
  All values that are not contained in given list.
  """
  value_not_in: [Float!]
  """
  All values less than the given value.
  """
  value_lt: Float
  """
  All values less than or equal the given value.
  """
  value_lte: Float
  """
  All values greater than the given value.
  """
  value_gt: Float
  """
  All values greater than or equal the given value.
  """
  value_gte: Float
  plant: PlantWhereInput
}

input SensorRadiationWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type SensorTemperatureConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [SensorTemperatureEdge]!
  aggregate: AggregateSensorTemperature!
}

input SensorTemperatureCreateInput {
  timeStamp: DateTime!
  value: Float!
  plant: PlantCreateOneWithoutTemperatureDataInput!
}

input SensorTemperatureCreateManyWithoutPlantInput {
  create: [SensorTemperatureCreateWithoutPlantInput!]
  connect: [SensorTemperatureWhereUniqueInput!]
}

input SensorTemperatureCreateWithoutPlantInput {
  timeStamp: DateTime!
  value: Float!
}

"""
An edge in a connection.
"""
type SensorTemperatureEdge {
  """
  The item at the end of the edge.
  """
  node: SensorTemperature!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum SensorTemperatureOrderByInput {
  id_ASC
  id_DESC
  timeStamp_ASC
  timeStamp_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SensorTemperaturePreviousValues {
  id: ID!
  timeStamp: DateTime!
  value: Float!
}

type SensorTemperatureSubscriptionPayload {
  mutation: MutationType!
  node: SensorTemperature
  updatedFields: [String!]
  previousValues: SensorTemperaturePreviousValues
}

input SensorTemperatureSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SensorTemperatureSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SensorTemperatureSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SensorTemperatureWhereInput
}

input SensorTemperatureUpdateInput {
  timeStamp: DateTime
  value: Float
  plant: PlantUpdateOneWithoutTemperatureDataInput
}

input SensorTemperatureUpdateManyWithoutPlantInput {
  create: [SensorTemperatureCreateWithoutPlantInput!]
  connect: [SensorTemperatureWhereUniqueInput!]
  disconnect: [SensorTemperatureWhereUniqueInput!]
  delete: [SensorTemperatureWhereUniqueInput!]
  update: [SensorTemperatureUpdateWithWhereUniqueWithoutPlantInput!]
  upsert: [SensorTemperatureUpsertWithWhereUniqueWithoutPlantInput!]
}

input SensorTemperatureUpdateWithoutPlantDataInput {
  timeStamp: DateTime
  value: Float
}

input SensorTemperatureUpdateWithWhereUniqueWithoutPlantInput {
  where: SensorTemperatureWhereUniqueInput!
  data: SensorTemperatureUpdateWithoutPlantDataInput!
}

input SensorTemperatureUpsertWithWhereUniqueWithoutPlantInput {
  where: SensorTemperatureWhereUniqueInput!
  update: SensorTemperatureUpdateWithoutPlantDataInput!
  create: SensorTemperatureCreateWithoutPlantInput!
}

input SensorTemperatureWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SensorTemperatureWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SensorTemperatureWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  timeStamp: DateTime
  """
  All values that are not equal to given value.
  """
  timeStamp_not: DateTime
  """
  All values that are contained in given list.
  """
  timeStamp_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  timeStamp_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  timeStamp_lt: DateTime
  """
  All values less than or equal the given value.
  """
  timeStamp_lte: DateTime
  """
  All values greater than the given value.
  """
  timeStamp_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  timeStamp_gte: DateTime
  value: Float
  """
  All values that are not equal to given value.
  """
  value_not: Float
  """
  All values that are contained in given list.
  """
  value_in: [Float!]
  """
  All values that are not contained in given list.
  """
  value_not_in: [Float!]
  """
  All values less than the given value.
  """
  value_lt: Float
  """
  All values less than or equal the given value.
  """
  value_lte: Float
  """
  All values greater than the given value.
  """
  value_gt: Float
  """
  All values greater than or equal the given value.
  """
  value_gte: Float
  plant: PlantWhereInput
}

input SensorTemperatureWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type SensorWaterConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [SensorWaterEdge]!
  aggregate: AggregateSensorWater!
}

input SensorWaterCreateInput {
  timeStamp: DateTime!
  value: Float!
  plant: PlantCreateOneWithoutWaterDataInput!
}

input SensorWaterCreateManyWithoutPlantInput {
  create: [SensorWaterCreateWithoutPlantInput!]
  connect: [SensorWaterWhereUniqueInput!]
}

input SensorWaterCreateWithoutPlantInput {
  timeStamp: DateTime!
  value: Float!
}

"""
An edge in a connection.
"""
type SensorWaterEdge {
  """
  The item at the end of the edge.
  """
  node: SensorWater!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum SensorWaterOrderByInput {
  id_ASC
  id_DESC
  timeStamp_ASC
  timeStamp_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SensorWaterPreviousValues {
  id: ID!
  timeStamp: DateTime!
  value: Float!
}

type SensorWaterSubscriptionPayload {
  mutation: MutationType!
  node: SensorWater
  updatedFields: [String!]
  previousValues: SensorWaterPreviousValues
}

input SensorWaterSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SensorWaterSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SensorWaterSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SensorWaterWhereInput
}

input SensorWaterUpdateInput {
  timeStamp: DateTime
  value: Float
  plant: PlantUpdateOneWithoutWaterDataInput
}

input SensorWaterUpdateManyWithoutPlantInput {
  create: [SensorWaterCreateWithoutPlantInput!]
  connect: [SensorWaterWhereUniqueInput!]
  disconnect: [SensorWaterWhereUniqueInput!]
  delete: [SensorWaterWhereUniqueInput!]
  update: [SensorWaterUpdateWithWhereUniqueWithoutPlantInput!]
  upsert: [SensorWaterUpsertWithWhereUniqueWithoutPlantInput!]
}

input SensorWaterUpdateWithoutPlantDataInput {
  timeStamp: DateTime
  value: Float
}

input SensorWaterUpdateWithWhereUniqueWithoutPlantInput {
  where: SensorWaterWhereUniqueInput!
  data: SensorWaterUpdateWithoutPlantDataInput!
}

input SensorWaterUpsertWithWhereUniqueWithoutPlantInput {
  where: SensorWaterWhereUniqueInput!
  update: SensorWaterUpdateWithoutPlantDataInput!
  create: SensorWaterCreateWithoutPlantInput!
}

input SensorWaterWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SensorWaterWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SensorWaterWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  timeStamp: DateTime
  """
  All values that are not equal to given value.
  """
  timeStamp_not: DateTime
  """
  All values that are contained in given list.
  """
  timeStamp_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  timeStamp_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  timeStamp_lt: DateTime
  """
  All values less than or equal the given value.
  """
  timeStamp_lte: DateTime
  """
  All values greater than the given value.
  """
  timeStamp_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  timeStamp_gte: DateTime
  value: Float
  """
  All values that are not equal to given value.
  """
  value_not: Float
  """
  All values that are contained in given list.
  """
  value_in: [Float!]
  """
  All values that are not contained in given list.
  """
  value_not_in: [Float!]
  """
  All values less than the given value.
  """
  value_lt: Float
  """
  All values less than or equal the given value.
  """
  value_lte: Float
  """
  All values greater than the given value.
  """
  value_gt: Float
  """
  All values greater than or equal the given value.
  """
  value_gte: Float
  plant: PlantWhereInput
}

input SensorWaterWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  plant(where: PlantSubscriptionWhereInput): PlantSubscriptionPayload
  ardu(where: ArduSubscriptionWhereInput): ArduSubscriptionPayload
  sensorTemperature(where: SensorTemperatureSubscriptionWhereInput): SensorTemperatureSubscriptionPayload
  sensorRadiation(where: SensorRadiationSubscriptionWhereInput): SensorRadiationSubscriptionPayload
  sensorHumidity(where: SensorHumiditySubscriptionWhereInput): SensorHumiditySubscriptionPayload
  sensorWater(where: SensorWaterSubscriptionWhereInput): SensorWaterSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  plants: PlantCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutPlantsInput {
  create: UserCreateWithoutPlantsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPlantsInput {
  email: String!
  password: String!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  plants: PlantUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutPlantsInput {
  create: UserCreateWithoutPlantsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutPlantsDataInput
  upsert: UserUpsertWithoutPlantsInput
}

input UserUpdateWithoutPlantsDataInput {
  email: String
  password: String
}

input UserUpsertWithoutPlantsInput {
  update: UserUpdateWithoutPlantsDataInput!
  create: UserCreateWithoutPlantsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  plants_every: PlantWhereInput
  plants_some: PlantWhereInput
  plants_none: PlantWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

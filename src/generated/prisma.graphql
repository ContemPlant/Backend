# source: http://localhost:4466/plantsdb/dev
# timestamp: Wed Jun 13 2018 17:26:14 GMT+0200 (CEST)

type AggregateArdu {
  count: Int!
}

type AggregatePlant {
  count: Int!
}

type AggregatePlantState {
  count: Int!
}

type AggregateSensorDates {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Ardu {
  arduId: String!
  loadedPlant(where: PlantWhereInput): Plant
}

"""A connection to a list of items."""
type ArduConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArduEdge]!
  aggregate: AggregateArdu!
}

input ArduCreateInput {
  arduId: String!
  loadedPlant: PlantCreateOneInput
}

"""An edge in a connection."""
type ArduEdge {
  """The item at the end of the edge."""
  node: Ardu!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ArduOrderByInput {
  arduId_ASC
  arduId_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ArduPreviousValues {
  arduId: String!
}

type ArduSubscriptionPayload {
  mutation: MutationType!
  node: Ardu
  updatedFields: [String!]
  previousValues: ArduPreviousValues
}

input ArduSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ArduSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArduSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArduSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ArduWhereInput
}

input ArduUpdateInput {
  arduId: String
  loadedPlant: PlantUpdateOneInput
}

input ArduWhereInput {
  """Logical AND on all given filters."""
  AND: [ArduWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArduWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArduWhereInput!]
  arduId: String

  """All values that are not equal to given value."""
  arduId_not: String

  """All values that are contained in given list."""
  arduId_in: [String!]

  """All values that are not contained in given list."""
  arduId_not_in: [String!]

  """All values less than the given value."""
  arduId_lt: String

  """All values less than or equal the given value."""
  arduId_lte: String

  """All values greater than the given value."""
  arduId_gt: String

  """All values greater than or equal the given value."""
  arduId_gte: String

  """All values containing the given string."""
  arduId_contains: String

  """All values not containing the given string."""
  arduId_not_contains: String

  """All values starting with the given string."""
  arduId_starts_with: String

  """All values not starting with the given string."""
  arduId_not_starts_with: String

  """All values ending with the given string."""
  arduId_ends_with: String

  """All values not ending with the given string."""
  arduId_not_ends_with: String
  loadedPlant: PlantWhereInput
}

input ArduWhereUniqueInput {
  arduId: String
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPlant(data: PlantCreateInput!): Plant!
  createArdu(data: ArduCreateInput!): Ardu!
  createSensorDates(data: SensorDatesCreateInput!): SensorDates!
  createPlantState(data: PlantStateCreateInput!): PlantState!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePlant(data: PlantUpdateInput!, where: PlantWhereUniqueInput!): Plant
  updateArdu(data: ArduUpdateInput!, where: ArduWhereUniqueInput!): Ardu
  updateSensorDates(data: SensorDatesUpdateInput!, where: SensorDatesWhereUniqueInput!): SensorDates
  updatePlantState(data: PlantStateUpdateInput!, where: PlantStateWhereUniqueInput!): PlantState
  deleteUser(where: UserWhereUniqueInput!): User
  deletePlant(where: PlantWhereUniqueInput!): Plant
  deleteArdu(where: ArduWhereUniqueInput!): Ardu
  deleteSensorDates(where: SensorDatesWhereUniqueInput!): SensorDates
  deletePlantState(where: PlantStateWhereUniqueInput!): PlantState
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPlant(where: PlantWhereUniqueInput!, create: PlantCreateInput!, update: PlantUpdateInput!): Plant!
  upsertArdu(where: ArduWhereUniqueInput!, create: ArduCreateInput!, update: ArduUpdateInput!): Ardu!
  upsertSensorDates(where: SensorDatesWhereUniqueInput!, create: SensorDatesCreateInput!, update: SensorDatesUpdateInput!): SensorDates!
  upsertPlantState(where: PlantStateWhereUniqueInput!, create: PlantStateCreateInput!, update: PlantStateUpdateInput!): PlantState!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyPlants(data: PlantUpdateInput!, where: PlantWhereInput): BatchPayload!
  updateManyArdus(data: ArduUpdateInput!, where: ArduWhereInput): BatchPayload!
  updateManySensorDateses(data: SensorDatesUpdateInput!, where: SensorDatesWhereInput): BatchPayload!
  updateManyPlantStates(data: PlantStateUpdateInput!, where: PlantStateWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPlants(where: PlantWhereInput): BatchPayload!
  deleteManyArdus(where: ArduWhereInput): BatchPayload!
  deleteManySensorDateses(where: SensorDatesWhereInput): BatchPayload!
  deleteManyPlantStates(where: PlantStateWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Plant implements Node {
  id: ID!
  owner(where: UserWhereInput): User!
  name: String!
  temperature_opt: Float!
  temperature_weight: Float!
  radiation_opt: Float!
  radiation_weight: Float!
  humidity_opt: Float!
  humidity_weight: Float!
  loudness_opt: Float!
  loudness_weight: Float!
  plantStates(where: PlantStateWhereInput, orderBy: PlantStateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlantState!]
  sensorDates(where: SensorDatesWhereInput, orderBy: SensorDatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorDates!]
}

"""A connection to a list of items."""
type PlantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlantEdge]!
  aggregate: AggregatePlant!
}

input PlantCreateInput {
  name: String!
  temperature_opt: Float!
  temperature_weight: Float!
  radiation_opt: Float!
  radiation_weight: Float!
  humidity_opt: Float!
  humidity_weight: Float!
  loudness_opt: Float!
  loudness_weight: Float!
  owner: UserCreateOneWithoutPlantsInput!
  plantStates: PlantStateCreateManyWithoutPlantInput
  sensorDates: SensorDatesCreateManyWithoutPlantInput
}

input PlantCreateManyWithoutOwnerInput {
  create: [PlantCreateWithoutOwnerInput!]
  connect: [PlantWhereUniqueInput!]
}

input PlantCreateOneInput {
  create: PlantCreateInput
  connect: PlantWhereUniqueInput
}

input PlantCreateOneWithoutPlantStatesInput {
  create: PlantCreateWithoutPlantStatesInput
  connect: PlantWhereUniqueInput
}

input PlantCreateOneWithoutSensorDatesInput {
  create: PlantCreateWithoutSensorDatesInput
  connect: PlantWhereUniqueInput
}

input PlantCreateWithoutOwnerInput {
  name: String!
  temperature_opt: Float!
  temperature_weight: Float!
  radiation_opt: Float!
  radiation_weight: Float!
  humidity_opt: Float!
  humidity_weight: Float!
  loudness_opt: Float!
  loudness_weight: Float!
  plantStates: PlantStateCreateManyWithoutPlantInput
  sensorDates: SensorDatesCreateManyWithoutPlantInput
}

input PlantCreateWithoutPlantStatesInput {
  name: String!
  temperature_opt: Float!
  temperature_weight: Float!
  radiation_opt: Float!
  radiation_weight: Float!
  humidity_opt: Float!
  humidity_weight: Float!
  loudness_opt: Float!
  loudness_weight: Float!
  owner: UserCreateOneWithoutPlantsInput!
  sensorDates: SensorDatesCreateManyWithoutPlantInput
}

input PlantCreateWithoutSensorDatesInput {
  name: String!
  temperature_opt: Float!
  temperature_weight: Float!
  radiation_opt: Float!
  radiation_weight: Float!
  humidity_opt: Float!
  humidity_weight: Float!
  loudness_opt: Float!
  loudness_weight: Float!
  owner: UserCreateOneWithoutPlantsInput!
  plantStates: PlantStateCreateManyWithoutPlantInput
}

"""An edge in a connection."""
type PlantEdge {
  """The item at the end of the edge."""
  node: Plant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlantOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  temperature_opt_ASC
  temperature_opt_DESC
  temperature_weight_ASC
  temperature_weight_DESC
  radiation_opt_ASC
  radiation_opt_DESC
  radiation_weight_ASC
  radiation_weight_DESC
  humidity_opt_ASC
  humidity_opt_DESC
  humidity_weight_ASC
  humidity_weight_DESC
  loudness_opt_ASC
  loudness_opt_DESC
  loudness_weight_ASC
  loudness_weight_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PlantPreviousValues {
  id: ID!
  name: String!
  temperature_opt: Float!
  temperature_weight: Float!
  radiation_opt: Float!
  radiation_weight: Float!
  humidity_opt: Float!
  humidity_weight: Float!
  loudness_opt: Float!
  loudness_weight: Float!
}

type PlantState implements Node {
  id: ID!
  environment: Float!
  plant(where: PlantWhereInput): Plant!
  health: Float!
  size: Float!
  sensorDates(where: SensorDatesWhereInput): SensorDates!
}

"""A connection to a list of items."""
type PlantStateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlantStateEdge]!
  aggregate: AggregatePlantState!
}

input PlantStateCreateInput {
  environment: Float!
  health: Float!
  size: Float!
  plant: PlantCreateOneWithoutPlantStatesInput!
  sensorDates: SensorDatesCreateOneInput!
}

input PlantStateCreateManyWithoutPlantInput {
  create: [PlantStateCreateWithoutPlantInput!]
  connect: [PlantStateWhereUniqueInput!]
}

input PlantStateCreateWithoutPlantInput {
  environment: Float!
  health: Float!
  size: Float!
  sensorDates: SensorDatesCreateOneInput!
}

"""An edge in a connection."""
type PlantStateEdge {
  """The item at the end of the edge."""
  node: PlantState!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlantStateOrderByInput {
  id_ASC
  id_DESC
  environment_ASC
  environment_DESC
  health_ASC
  health_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PlantStatePreviousValues {
  id: ID!
  environment: Float!
  health: Float!
  size: Float!
}

type PlantStateSubscriptionPayload {
  mutation: MutationType!
  node: PlantState
  updatedFields: [String!]
  previousValues: PlantStatePreviousValues
}

input PlantStateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlantStateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlantStateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlantStateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlantStateWhereInput
}

input PlantStateUpdateInput {
  environment: Float
  health: Float
  size: Float
  plant: PlantUpdateOneWithoutPlantStatesInput
  sensorDates: SensorDatesUpdateOneInput
}

input PlantStateUpdateManyWithoutPlantInput {
  create: [PlantStateCreateWithoutPlantInput!]
  connect: [PlantStateWhereUniqueInput!]
  disconnect: [PlantStateWhereUniqueInput!]
  delete: [PlantStateWhereUniqueInput!]
  update: [PlantStateUpdateWithWhereUniqueWithoutPlantInput!]
  upsert: [PlantStateUpsertWithWhereUniqueWithoutPlantInput!]
}

input PlantStateUpdateWithoutPlantDataInput {
  environment: Float
  health: Float
  size: Float
  sensorDates: SensorDatesUpdateOneInput
}

input PlantStateUpdateWithWhereUniqueWithoutPlantInput {
  where: PlantStateWhereUniqueInput!
  data: PlantStateUpdateWithoutPlantDataInput!
}

input PlantStateUpsertWithWhereUniqueWithoutPlantInput {
  where: PlantStateWhereUniqueInput!
  update: PlantStateUpdateWithoutPlantDataInput!
  create: PlantStateCreateWithoutPlantInput!
}

input PlantStateWhereInput {
  """Logical AND on all given filters."""
  AND: [PlantStateWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlantStateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlantStateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  environment: Float

  """All values that are not equal to given value."""
  environment_not: Float

  """All values that are contained in given list."""
  environment_in: [Float!]

  """All values that are not contained in given list."""
  environment_not_in: [Float!]

  """All values less than the given value."""
  environment_lt: Float

  """All values less than or equal the given value."""
  environment_lte: Float

  """All values greater than the given value."""
  environment_gt: Float

  """All values greater than or equal the given value."""
  environment_gte: Float
  health: Float

  """All values that are not equal to given value."""
  health_not: Float

  """All values that are contained in given list."""
  health_in: [Float!]

  """All values that are not contained in given list."""
  health_not_in: [Float!]

  """All values less than the given value."""
  health_lt: Float

  """All values less than or equal the given value."""
  health_lte: Float

  """All values greater than the given value."""
  health_gt: Float

  """All values greater than or equal the given value."""
  health_gte: Float
  size: Float

  """All values that are not equal to given value."""
  size_not: Float

  """All values that are contained in given list."""
  size_in: [Float!]

  """All values that are not contained in given list."""
  size_not_in: [Float!]

  """All values less than the given value."""
  size_lt: Float

  """All values less than or equal the given value."""
  size_lte: Float

  """All values greater than the given value."""
  size_gt: Float

  """All values greater than or equal the given value."""
  size_gte: Float
  plant: PlantWhereInput
  sensorDates: SensorDatesWhereInput
}

input PlantStateWhereUniqueInput {
  id: ID
}

type PlantSubscriptionPayload {
  mutation: MutationType!
  node: Plant
  updatedFields: [String!]
  previousValues: PlantPreviousValues
}

input PlantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlantWhereInput
}

input PlantUpdateDataInput {
  name: String
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  plantStates: PlantStateUpdateManyWithoutPlantInput
  sensorDates: SensorDatesUpdateManyWithoutPlantInput
}

input PlantUpdateInput {
  name: String
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  plantStates: PlantStateUpdateManyWithoutPlantInput
  sensorDates: SensorDatesUpdateManyWithoutPlantInput
}

input PlantUpdateManyWithoutOwnerInput {
  create: [PlantCreateWithoutOwnerInput!]
  connect: [PlantWhereUniqueInput!]
  disconnect: [PlantWhereUniqueInput!]
  delete: [PlantWhereUniqueInput!]
  update: [PlantUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [PlantUpsertWithWhereUniqueWithoutOwnerInput!]
}

input PlantUpdateOneInput {
  create: PlantCreateInput
  connect: PlantWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PlantUpdateDataInput
  upsert: PlantUpsertNestedInput
}

input PlantUpdateOneWithoutPlantStatesInput {
  create: PlantCreateWithoutPlantStatesInput
  connect: PlantWhereUniqueInput
  delete: Boolean
  update: PlantUpdateWithoutPlantStatesDataInput
  upsert: PlantUpsertWithoutPlantStatesInput
}

input PlantUpdateOneWithoutSensorDatesInput {
  create: PlantCreateWithoutSensorDatesInput
  connect: PlantWhereUniqueInput
  delete: Boolean
  update: PlantUpdateWithoutSensorDatesDataInput
  upsert: PlantUpsertWithoutSensorDatesInput
}

input PlantUpdateWithoutOwnerDataInput {
  name: String
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  plantStates: PlantStateUpdateManyWithoutPlantInput
  sensorDates: SensorDatesUpdateManyWithoutPlantInput
}

input PlantUpdateWithoutPlantStatesDataInput {
  name: String
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  sensorDates: SensorDatesUpdateManyWithoutPlantInput
}

input PlantUpdateWithoutSensorDatesDataInput {
  name: String
  temperature_opt: Float
  temperature_weight: Float
  radiation_opt: Float
  radiation_weight: Float
  humidity_opt: Float
  humidity_weight: Float
  loudness_opt: Float
  loudness_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
  plantStates: PlantStateUpdateManyWithoutPlantInput
}

input PlantUpdateWithWhereUniqueWithoutOwnerInput {
  where: PlantWhereUniqueInput!
  data: PlantUpdateWithoutOwnerDataInput!
}

input PlantUpsertNestedInput {
  update: PlantUpdateDataInput!
  create: PlantCreateInput!
}

input PlantUpsertWithoutPlantStatesInput {
  update: PlantUpdateWithoutPlantStatesDataInput!
  create: PlantCreateWithoutPlantStatesInput!
}

input PlantUpsertWithoutSensorDatesInput {
  update: PlantUpdateWithoutSensorDatesDataInput!
  create: PlantCreateWithoutSensorDatesInput!
}

input PlantUpsertWithWhereUniqueWithoutOwnerInput {
  where: PlantWhereUniqueInput!
  update: PlantUpdateWithoutOwnerDataInput!
  create: PlantCreateWithoutOwnerInput!
}

input PlantWhereInput {
  """Logical AND on all given filters."""
  AND: [PlantWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  temperature_opt: Float

  """All values that are not equal to given value."""
  temperature_opt_not: Float

  """All values that are contained in given list."""
  temperature_opt_in: [Float!]

  """All values that are not contained in given list."""
  temperature_opt_not_in: [Float!]

  """All values less than the given value."""
  temperature_opt_lt: Float

  """All values less than or equal the given value."""
  temperature_opt_lte: Float

  """All values greater than the given value."""
  temperature_opt_gt: Float

  """All values greater than or equal the given value."""
  temperature_opt_gte: Float
  temperature_weight: Float

  """All values that are not equal to given value."""
  temperature_weight_not: Float

  """All values that are contained in given list."""
  temperature_weight_in: [Float!]

  """All values that are not contained in given list."""
  temperature_weight_not_in: [Float!]

  """All values less than the given value."""
  temperature_weight_lt: Float

  """All values less than or equal the given value."""
  temperature_weight_lte: Float

  """All values greater than the given value."""
  temperature_weight_gt: Float

  """All values greater than or equal the given value."""
  temperature_weight_gte: Float
  radiation_opt: Float

  """All values that are not equal to given value."""
  radiation_opt_not: Float

  """All values that are contained in given list."""
  radiation_opt_in: [Float!]

  """All values that are not contained in given list."""
  radiation_opt_not_in: [Float!]

  """All values less than the given value."""
  radiation_opt_lt: Float

  """All values less than or equal the given value."""
  radiation_opt_lte: Float

  """All values greater than the given value."""
  radiation_opt_gt: Float

  """All values greater than or equal the given value."""
  radiation_opt_gte: Float
  radiation_weight: Float

  """All values that are not equal to given value."""
  radiation_weight_not: Float

  """All values that are contained in given list."""
  radiation_weight_in: [Float!]

  """All values that are not contained in given list."""
  radiation_weight_not_in: [Float!]

  """All values less than the given value."""
  radiation_weight_lt: Float

  """All values less than or equal the given value."""
  radiation_weight_lte: Float

  """All values greater than the given value."""
  radiation_weight_gt: Float

  """All values greater than or equal the given value."""
  radiation_weight_gte: Float
  humidity_opt: Float

  """All values that are not equal to given value."""
  humidity_opt_not: Float

  """All values that are contained in given list."""
  humidity_opt_in: [Float!]

  """All values that are not contained in given list."""
  humidity_opt_not_in: [Float!]

  """All values less than the given value."""
  humidity_opt_lt: Float

  """All values less than or equal the given value."""
  humidity_opt_lte: Float

  """All values greater than the given value."""
  humidity_opt_gt: Float

  """All values greater than or equal the given value."""
  humidity_opt_gte: Float
  humidity_weight: Float

  """All values that are not equal to given value."""
  humidity_weight_not: Float

  """All values that are contained in given list."""
  humidity_weight_in: [Float!]

  """All values that are not contained in given list."""
  humidity_weight_not_in: [Float!]

  """All values less than the given value."""
  humidity_weight_lt: Float

  """All values less than or equal the given value."""
  humidity_weight_lte: Float

  """All values greater than the given value."""
  humidity_weight_gt: Float

  """All values greater than or equal the given value."""
  humidity_weight_gte: Float
  loudness_opt: Float

  """All values that are not equal to given value."""
  loudness_opt_not: Float

  """All values that are contained in given list."""
  loudness_opt_in: [Float!]

  """All values that are not contained in given list."""
  loudness_opt_not_in: [Float!]

  """All values less than the given value."""
  loudness_opt_lt: Float

  """All values less than or equal the given value."""
  loudness_opt_lte: Float

  """All values greater than the given value."""
  loudness_opt_gt: Float

  """All values greater than or equal the given value."""
  loudness_opt_gte: Float
  loudness_weight: Float

  """All values that are not equal to given value."""
  loudness_weight_not: Float

  """All values that are contained in given list."""
  loudness_weight_in: [Float!]

  """All values that are not contained in given list."""
  loudness_weight_not_in: [Float!]

  """All values less than the given value."""
  loudness_weight_lt: Float

  """All values less than or equal the given value."""
  loudness_weight_lte: Float

  """All values greater than the given value."""
  loudness_weight_gt: Float

  """All values greater than or equal the given value."""
  loudness_weight_gte: Float
  owner: UserWhereInput
  plantStates_every: PlantStateWhereInput
  plantStates_some: PlantStateWhereInput
  plantStates_none: PlantStateWhereInput
  sensorDates_every: SensorDatesWhereInput
  sensorDates_some: SensorDatesWhereInput
  sensorDates_none: SensorDatesWhereInput
}

input PlantWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  plants(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plant]!
  ardus(where: ArduWhereInput, orderBy: ArduOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ardu]!
  sensorDateses(where: SensorDatesWhereInput, orderBy: SensorDatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorDates]!
  plantStates(where: PlantStateWhereInput, orderBy: PlantStateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlantState]!
  user(where: UserWhereUniqueInput!): User
  plant(where: PlantWhereUniqueInput!): Plant
  ardu(where: ArduWhereUniqueInput!): Ardu
  sensorDates(where: SensorDatesWhereUniqueInput!): SensorDates
  plantState(where: PlantStateWhereUniqueInput!): PlantState
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  plantsConnection(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlantConnection!
  ardusConnection(where: ArduWhereInput, orderBy: ArduOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArduConnection!
  sensorDatesesConnection(where: SensorDatesWhereInput, orderBy: SensorDatesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SensorDatesConnection!
  plantStatesConnection(where: PlantStateWhereInput, orderBy: PlantStateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlantStateConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type SensorDates implements Node {
  id: ID!
  timeStamp: DateTime!
  plant(where: PlantWhereInput): Plant!
  temperatureValue: Float!
  radiationValue: Float!
  humidityValue: Float!
  loudnessValue: Float!
}

"""A connection to a list of items."""
type SensorDatesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SensorDatesEdge]!
  aggregate: AggregateSensorDates!
}

input SensorDatesCreateInput {
  timeStamp: DateTime!
  temperatureValue: Float!
  radiationValue: Float!
  humidityValue: Float!
  loudnessValue: Float!
  plant: PlantCreateOneWithoutSensorDatesInput!
}

input SensorDatesCreateManyWithoutPlantInput {
  create: [SensorDatesCreateWithoutPlantInput!]
  connect: [SensorDatesWhereUniqueInput!]
}

input SensorDatesCreateOneInput {
  create: SensorDatesCreateInput
  connect: SensorDatesWhereUniqueInput
}

input SensorDatesCreateWithoutPlantInput {
  timeStamp: DateTime!
  temperatureValue: Float!
  radiationValue: Float!
  humidityValue: Float!
  loudnessValue: Float!
}

"""An edge in a connection."""
type SensorDatesEdge {
  """The item at the end of the edge."""
  node: SensorDates!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SensorDatesOrderByInput {
  id_ASC
  id_DESC
  timeStamp_ASC
  timeStamp_DESC
  temperatureValue_ASC
  temperatureValue_DESC
  radiationValue_ASC
  radiationValue_DESC
  humidityValue_ASC
  humidityValue_DESC
  loudnessValue_ASC
  loudnessValue_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SensorDatesPreviousValues {
  id: ID!
  timeStamp: DateTime!
  temperatureValue: Float!
  radiationValue: Float!
  humidityValue: Float!
  loudnessValue: Float!
}

type SensorDatesSubscriptionPayload {
  mutation: MutationType!
  node: SensorDates
  updatedFields: [String!]
  previousValues: SensorDatesPreviousValues
}

input SensorDatesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SensorDatesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SensorDatesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SensorDatesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SensorDatesWhereInput
}

input SensorDatesUpdateDataInput {
  timeStamp: DateTime
  temperatureValue: Float
  radiationValue: Float
  humidityValue: Float
  loudnessValue: Float
  plant: PlantUpdateOneWithoutSensorDatesInput
}

input SensorDatesUpdateInput {
  timeStamp: DateTime
  temperatureValue: Float
  radiationValue: Float
  humidityValue: Float
  loudnessValue: Float
  plant: PlantUpdateOneWithoutSensorDatesInput
}

input SensorDatesUpdateManyWithoutPlantInput {
  create: [SensorDatesCreateWithoutPlantInput!]
  connect: [SensorDatesWhereUniqueInput!]
  disconnect: [SensorDatesWhereUniqueInput!]
  delete: [SensorDatesWhereUniqueInput!]
  update: [SensorDatesUpdateWithWhereUniqueWithoutPlantInput!]
  upsert: [SensorDatesUpsertWithWhereUniqueWithoutPlantInput!]
}

input SensorDatesUpdateOneInput {
  create: SensorDatesCreateInput
  connect: SensorDatesWhereUniqueInput
  delete: Boolean
  update: SensorDatesUpdateDataInput
  upsert: SensorDatesUpsertNestedInput
}

input SensorDatesUpdateWithoutPlantDataInput {
  timeStamp: DateTime
  temperatureValue: Float
  radiationValue: Float
  humidityValue: Float
  loudnessValue: Float
}

input SensorDatesUpdateWithWhereUniqueWithoutPlantInput {
  where: SensorDatesWhereUniqueInput!
  data: SensorDatesUpdateWithoutPlantDataInput!
}

input SensorDatesUpsertNestedInput {
  update: SensorDatesUpdateDataInput!
  create: SensorDatesCreateInput!
}

input SensorDatesUpsertWithWhereUniqueWithoutPlantInput {
  where: SensorDatesWhereUniqueInput!
  update: SensorDatesUpdateWithoutPlantDataInput!
  create: SensorDatesCreateWithoutPlantInput!
}

input SensorDatesWhereInput {
  """Logical AND on all given filters."""
  AND: [SensorDatesWhereInput!]

  """Logical OR on all given filters."""
  OR: [SensorDatesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SensorDatesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  timeStamp: DateTime

  """All values that are not equal to given value."""
  timeStamp_not: DateTime

  """All values that are contained in given list."""
  timeStamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timeStamp_not_in: [DateTime!]

  """All values less than the given value."""
  timeStamp_lt: DateTime

  """All values less than or equal the given value."""
  timeStamp_lte: DateTime

  """All values greater than the given value."""
  timeStamp_gt: DateTime

  """All values greater than or equal the given value."""
  timeStamp_gte: DateTime
  temperatureValue: Float

  """All values that are not equal to given value."""
  temperatureValue_not: Float

  """All values that are contained in given list."""
  temperatureValue_in: [Float!]

  """All values that are not contained in given list."""
  temperatureValue_not_in: [Float!]

  """All values less than the given value."""
  temperatureValue_lt: Float

  """All values less than or equal the given value."""
  temperatureValue_lte: Float

  """All values greater than the given value."""
  temperatureValue_gt: Float

  """All values greater than or equal the given value."""
  temperatureValue_gte: Float
  radiationValue: Float

  """All values that are not equal to given value."""
  radiationValue_not: Float

  """All values that are contained in given list."""
  radiationValue_in: [Float!]

  """All values that are not contained in given list."""
  radiationValue_not_in: [Float!]

  """All values less than the given value."""
  radiationValue_lt: Float

  """All values less than or equal the given value."""
  radiationValue_lte: Float

  """All values greater than the given value."""
  radiationValue_gt: Float

  """All values greater than or equal the given value."""
  radiationValue_gte: Float
  humidityValue: Float

  """All values that are not equal to given value."""
  humidityValue_not: Float

  """All values that are contained in given list."""
  humidityValue_in: [Float!]

  """All values that are not contained in given list."""
  humidityValue_not_in: [Float!]

  """All values less than the given value."""
  humidityValue_lt: Float

  """All values less than or equal the given value."""
  humidityValue_lte: Float

  """All values greater than the given value."""
  humidityValue_gt: Float

  """All values greater than or equal the given value."""
  humidityValue_gte: Float
  loudnessValue: Float

  """All values that are not equal to given value."""
  loudnessValue_not: Float

  """All values that are contained in given list."""
  loudnessValue_in: [Float!]

  """All values that are not contained in given list."""
  loudnessValue_not_in: [Float!]

  """All values less than the given value."""
  loudnessValue_lt: Float

  """All values less than or equal the given value."""
  loudnessValue_lte: Float

  """All values greater than the given value."""
  loudnessValue_gt: Float

  """All values greater than or equal the given value."""
  loudnessValue_gte: Float
  plant: PlantWhereInput
}

input SensorDatesWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  plant(where: PlantSubscriptionWhereInput): PlantSubscriptionPayload
  ardu(where: ArduSubscriptionWhereInput): ArduSubscriptionPayload
  sensorDates(where: SensorDatesSubscriptionWhereInput): SensorDatesSubscriptionPayload
  plantState(where: PlantStateSubscriptionWhereInput): PlantStateSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
  password: String!
  plants(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plant!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  email: String!
  password: String!
  plants: PlantCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutPlantsInput {
  create: UserCreateWithoutPlantsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPlantsInput {
  username: String!
  email: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  plants: PlantUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutPlantsInput {
  create: UserCreateWithoutPlantsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutPlantsDataInput
  upsert: UserUpsertWithoutPlantsInput
}

input UserUpdateWithoutPlantsDataInput {
  username: String
  email: String
  password: String
}

input UserUpsertWithoutPlantsInput {
  update: UserUpdateWithoutPlantsDataInput!
  create: UserCreateWithoutPlantsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  plants_every: PlantWhereInput
  plants_some: PlantWhereInput
  plants_none: PlantWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

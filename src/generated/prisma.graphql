# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Plant implements Node {
  id: ID!
  temperature_opt: Float!
  temperature_weight: Float!
  owner(where: UserWhereInput): User!
}

type SensorTemperature implements Node {
  id: ID!
  plant(where: PlantWhereInput): Plant!
  createdAt: DateTime!
  value: Float!
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  plants(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plant!]
}


#
# Other Types
#

type AggregatePlant {
  count: Int!
}

type AggregateSensorTemperature {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPlant(data: PlantCreateInput!): Plant!
  createSensorTemperature(data: SensorTemperatureCreateInput!): SensorTemperature!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePlant(data: PlantUpdateInput!, where: PlantWhereUniqueInput!): Plant
  updateSensorTemperature(data: SensorTemperatureUpdateInput!, where: SensorTemperatureWhereUniqueInput!): SensorTemperature
  deleteUser(where: UserWhereUniqueInput!): User
  deletePlant(where: PlantWhereUniqueInput!): Plant
  deleteSensorTemperature(where: SensorTemperatureWhereUniqueInput!): SensorTemperature
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPlant(where: PlantWhereUniqueInput!, create: PlantCreateInput!, update: PlantUpdateInput!): Plant!
  upsertSensorTemperature(where: SensorTemperatureWhereUniqueInput!, create: SensorTemperatureCreateInput!, update: SensorTemperatureUpdateInput!): SensorTemperature!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyPlants(data: PlantUpdateInput!, where: PlantWhereInput): BatchPayload!
  updateManySensorTemperatures(data: SensorTemperatureUpdateInput!, where: SensorTemperatureWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPlants(where: PlantWhereInput): BatchPayload!
  deleteManySensorTemperatures(where: SensorTemperatureWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PlantConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PlantEdge]!
  aggregate: AggregatePlant!
}

input PlantCreateInput {
  temperature_opt: Float!
  temperature_weight: Float!
  owner: UserCreateOneWithoutPlantsInput!
}

input PlantCreateManyWithoutOwnerInput {
  create: [PlantCreateWithoutOwnerInput!]
  connect: [PlantWhereUniqueInput!]
}

input PlantCreateOneInput {
  create: PlantCreateInput
  connect: PlantWhereUniqueInput
}

input PlantCreateWithoutOwnerInput {
  temperature_opt: Float!
  temperature_weight: Float!
}

"""
An edge in a connection.
"""
type PlantEdge {
  """
  The item at the end of the edge.
  """
  node: Plant!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PlantOrderByInput {
  id_ASC
  id_DESC
  temperature_opt_ASC
  temperature_opt_DESC
  temperature_weight_ASC
  temperature_weight_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PlantPreviousValues {
  id: ID!
  temperature_opt: Float!
  temperature_weight: Float!
}

type PlantSubscriptionPayload {
  mutation: MutationType!
  node: Plant
  updatedFields: [String!]
  previousValues: PlantPreviousValues
}

input PlantSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PlantSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PlantSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlantWhereInput
}

input PlantUpdateDataInput {
  temperature_opt: Float
  temperature_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
}

input PlantUpdateInput {
  temperature_opt: Float
  temperature_weight: Float
  owner: UserUpdateOneWithoutPlantsInput
}

input PlantUpdateManyWithoutOwnerInput {
  create: [PlantCreateWithoutOwnerInput!]
  connect: [PlantWhereUniqueInput!]
  disconnect: [PlantWhereUniqueInput!]
  delete: [PlantWhereUniqueInput!]
  update: [PlantUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [PlantUpsertWithWhereUniqueWithoutOwnerInput!]
}

input PlantUpdateOneInput {
  create: PlantCreateInput
  connect: PlantWhereUniqueInput
  delete: Boolean
  update: PlantUpdateDataInput
  upsert: PlantUpsertNestedInput
}

input PlantUpdateWithoutOwnerDataInput {
  temperature_opt: Float
  temperature_weight: Float
}

input PlantUpdateWithWhereUniqueWithoutOwnerInput {
  where: PlantWhereUniqueInput!
  data: PlantUpdateWithoutOwnerDataInput!
}

input PlantUpsertNestedInput {
  update: PlantUpdateDataInput!
  create: PlantCreateInput!
}

input PlantUpsertWithWhereUniqueWithoutOwnerInput {
  where: PlantWhereUniqueInput!
  update: PlantUpdateWithoutOwnerDataInput!
  create: PlantCreateWithoutOwnerInput!
}

input PlantWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PlantWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PlantWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  temperature_opt: Float
  """
  All values that are not equal to given value.
  """
  temperature_opt_not: Float
  """
  All values that are contained in given list.
  """
  temperature_opt_in: [Float!]
  """
  All values that are not contained in given list.
  """
  temperature_opt_not_in: [Float!]
  """
  All values less than the given value.
  """
  temperature_opt_lt: Float
  """
  All values less than or equal the given value.
  """
  temperature_opt_lte: Float
  """
  All values greater than the given value.
  """
  temperature_opt_gt: Float
  """
  All values greater than or equal the given value.
  """
  temperature_opt_gte: Float
  temperature_weight: Float
  """
  All values that are not equal to given value.
  """
  temperature_weight_not: Float
  """
  All values that are contained in given list.
  """
  temperature_weight_in: [Float!]
  """
  All values that are not contained in given list.
  """
  temperature_weight_not_in: [Float!]
  """
  All values less than the given value.
  """
  temperature_weight_lt: Float
  """
  All values less than or equal the given value.
  """
  temperature_weight_lte: Float
  """
  All values greater than the given value.
  """
  temperature_weight_gt: Float
  """
  All values greater than or equal the given value.
  """
  temperature_weight_gte: Float
  owner: UserWhereInput
}

input PlantWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  plants(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Plant]!
  sensorTemperatures(where: SensorTemperatureWhereInput, orderBy: SensorTemperatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SensorTemperature]!
  user(where: UserWhereUniqueInput!): User
  plant(where: PlantWhereUniqueInput!): Plant
  sensorTemperature(where: SensorTemperatureWhereUniqueInput!): SensorTemperature
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  plantsConnection(where: PlantWhereInput, orderBy: PlantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlantConnection!
  sensorTemperaturesConnection(where: SensorTemperatureWhereInput, orderBy: SensorTemperatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SensorTemperatureConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

"""
A connection to a list of items.
"""
type SensorTemperatureConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [SensorTemperatureEdge]!
  aggregate: AggregateSensorTemperature!
}

input SensorTemperatureCreateInput {
  value: Float!
  plant: PlantCreateOneInput!
}

"""
An edge in a connection.
"""
type SensorTemperatureEdge {
  """
  The item at the end of the edge.
  """
  node: SensorTemperature!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum SensorTemperatureOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  value_ASC
  value_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SensorTemperaturePreviousValues {
  id: ID!
  createdAt: DateTime!
  value: Float!
}

type SensorTemperatureSubscriptionPayload {
  mutation: MutationType!
  node: SensorTemperature
  updatedFields: [String!]
  previousValues: SensorTemperaturePreviousValues
}

input SensorTemperatureSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SensorTemperatureSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SensorTemperatureSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SensorTemperatureWhereInput
}

input SensorTemperatureUpdateInput {
  value: Float
  plant: PlantUpdateOneInput
}

input SensorTemperatureWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SensorTemperatureWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SensorTemperatureWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  value: Float
  """
  All values that are not equal to given value.
  """
  value_not: Float
  """
  All values that are contained in given list.
  """
  value_in: [Float!]
  """
  All values that are not contained in given list.
  """
  value_not_in: [Float!]
  """
  All values less than the given value.
  """
  value_lt: Float
  """
  All values less than or equal the given value.
  """
  value_lte: Float
  """
  All values greater than the given value.
  """
  value_gt: Float
  """
  All values greater than or equal the given value.
  """
  value_gte: Float
  plant: PlantWhereInput
}

input SensorTemperatureWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  plant(where: PlantSubscriptionWhereInput): PlantSubscriptionPayload
  sensorTemperature(where: SensorTemperatureSubscriptionWhereInput): SensorTemperatureSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  plants: PlantCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutPlantsInput {
  create: UserCreateWithoutPlantsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPlantsInput {
  email: String!
  password: String!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  plants: PlantUpdateManyWithoutOwnerInput
}

input UserUpdateOneWithoutPlantsInput {
  create: UserCreateWithoutPlantsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutPlantsDataInput
  upsert: UserUpsertWithoutPlantsInput
}

input UserUpdateWithoutPlantsDataInput {
  email: String
  password: String
}

input UserUpsertWithoutPlantsInput {
  update: UserUpdateWithoutPlantsDataInput!
  create: UserCreateWithoutPlantsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  plants_every: PlantWhereInput
  plants_some: PlantWhereInput
  plants_none: PlantWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
